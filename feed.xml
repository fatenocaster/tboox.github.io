<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX</title>
    <description>Welcome to the website for the TBOOX Open Source Project!
</description>
    <link>http://tboox.org/</link>
    <atom:link href="http://tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 03 Feb 2016 23:43:37 +0800</pubDate>
    <lastBuildDate>Wed, 03 Feb 2016 23:43:37 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>xmake工程描述入门</title>
        <description>&lt;p&gt;xmake的工程描述文件，摈弃了makefile的繁琐复杂，借鉴了premake的简洁明了，原生支持lua脚本，使得更加的灵活、方便扩展。&lt;/p&gt;

&lt;p&gt;工程默认描述文件名为xmake.lua，支持多级目录嵌套，也可以通过以下命令，指定其他文件作为工程描述文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake -f /tmp/xxx.lua
xmake --file=xxx.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面先来看一个最简单的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 添加一个名为demo的目标到工程
add_target(&quot;demo&quot;)

    -- 设置目标程序类型为二进制可执行程序，一般为console的终端命令行程序
    set_kind(&quot;binary&quot;)

    -- 添加src目录下的所有c文件
    add_files(&quot;src/*.c&quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;怎么样简单吧，这样就已经完成了一个最简单的工程描述。。&lt;/p&gt;

&lt;p&gt;下面我们看一个稍微复杂一点的例子，这个例子中对release、debug模式进行了不同的设置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 如果当前编译的是debug模式
if modes(&quot;debug&quot;) then
    
    -- 启用调试符号
    set_symbols(&quot;debug&quot;)

    -- 禁用优化
    set_optimize(&quot;none&quot;)
end

-- 如果当前编译的是release模式
if modes(&quot;release&quot;) then

    -- 设置符号可见性为不可见
    set_symbols(&quot;hidden&quot;)

    -- 启用最快优化模式
    set_optimize(&quot;fastest&quot;)

    -- 去除所有符号信息，包括调试符号
    set_strip(&quot;all&quot;)
end

-- 添加一个名为test的目标
add_target(&quot;test&quot;)

    -- 将test编译成为静态库类型
    set_kind(&quot;static&quot;)

    -- 添加所有c++文件，包括子目录（注：**表明多级递归匹配模式）
    add_files(&quot;src/**.cpp&quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实也不是很复杂吧，由于采用lua语法，所以逻辑上更加的灵活，你完全可以用lua的分支、循环、函数等语法，进行更加灵活的配置。。&lt;/p&gt;

</description>
        <pubDate>Wed, 03 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/xmake/2016/02/03/xmake-description.html</link>
        <guid isPermaLink="true">http://tboox.org/cn/xmake/2016/02/03/xmake-description.html</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>利用bloom filter算法处理大规模数据过滤</title>
        <description>&lt;p&gt;Bloom Filter是由Bloom在1970年提出的一种快速查找算法，通过多个hash算法来共同判断某个元素是否在某个集合内。可以用于网络爬虫的url重复过滤、垃圾邮件的过滤等等。&lt;/p&gt;

&lt;p&gt;它相比hash容器的一个优势就是，不需要存储元素的实际数据到容器中去来一个个的比较是否存在。
只需要对应的位段来标记是否存在就行了，所以想当节省内存，特别适合海量的数据处理。并且由于省去了存储元素和比较操作，所以性能也比基于hash容器的高了很多。&lt;/p&gt;

&lt;p&gt;但是由于bloom filter没有去比较元素，只通过多个hash来判断唯一性，所以存在一定的hash冲突导致误判。误判率的大小由hash函数的个数、hash函数优劣、以及存储的位空间大小共同决定。&lt;/p&gt;

&lt;p&gt;并且删除也比较困难，解决办法是使用其变种，带计数的bloom filter，这个这里就不多说了。&lt;/p&gt;

&lt;p&gt;对于bloom filter算法的实现，相当简单：
首先分配一块固定的连续空间，大小是m个比特位（m/8+1个字节），然后再提供k个不同hash函数，同时对每个元素进行计算位索引。如果每个位索引对应的位都为1，则存在该元素，否则就是不存在。&lt;/p&gt;

&lt;p&gt;可以看出，如果判断为不存在，那么肯定是不存在的，只有在判断为存在的时候，才会存在误判。&lt;/p&gt;

&lt;p&gt;bloom filter主要的难点其实在于估算：
保证指定误判率的情况下，到底需要多少个hash函数，多少的存储空间。&lt;/p&gt;

&lt;p&gt;首先来看下bloom filter的误判率计算公式：&lt;/p&gt;

&lt;p&gt;假定有k个hash函数，m个比特位的存储空间，n个集合元素，则有误判率p：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p = (1 - ((1 - 1/ m) ^ kn))^k ~= (1 - e^(-kn/m))^k
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;根据这个，官方给出了一个计算k的最优解公式，使其满足给定p的情况下，存储空间达到最小：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;k = (m / n) * ln2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把它带入概率公式得到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p = (1 - e ^-((m/nln2)n/m))^(m/nln2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;简化为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lnp = -m/n * (ln2)^2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因此，如果指定p，只需要满足如果公式，就可以得到最优解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s = m/n = -lnp / (ln2 * ln2) = -log2(p) / ln2
k = s * ln2 = -log2(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;理论值：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p &amp;lt; 0.1: k = 3.321928, m/n = 4.79
p &amp;lt; 0.01: k = 6.643856, m/n = 9.58
p &amp;lt; 0.001: k = 9.965784, m/n = 14.37
p &amp;lt; 0.0001: k = 13.287712, m/n = 19.170117
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看出，这个确实能够在保证误判率的前提下，使其存储空间达到最小，但是使用的hash函数个数k
相对较多，至少也得4个，要满足p &amp;lt; 0.001，需要10个才行，这个对于字符串hash的计算来讲，性能损耗相当大的，实际使用中根本没法接受。&lt;/p&gt;

&lt;p&gt;因此我们需要另外一种推到公式，可以认为指定p和k的情况下，来计算空间使用s=m/n的大小，这样我们在实际使用的时候，灵活性就大大提高了。&lt;/p&gt;

&lt;p&gt;下面来看下，我自己推到出来的公式，首先还是依据误判率公式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p = (1 - e^(-kn/m))^k
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;假定s=m/n，则有&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p = (1 - e^(-k/s))^k
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;两边取导，得到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lnp = k * ln(1 - e^(-k/s))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;交换k：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(lnp) / k = ln(1 - e^(-k/s))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重新上e：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;e^((lnp) / k) = 1 - e^(-k/s)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;化简：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;e^(-k/s) = 1 - e^((lnp) / k) = 1 - (e^lnp)^(1/k) = 1 - p^(1/k)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再求导：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-k/s = ln(1 - p^(1/k))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;得出：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s = -k / ln(1 - p^(1/k))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;假定&lt;code class=&quot;highlighter-rouge&quot;&gt;c = p^(1/k)&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s = -k / ln(1 - c)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;利用泰勒展开式：&lt;code class=&quot;highlighter-rouge&quot;&gt;ln(1 + x) ~= x - 0.5x^2 while x &amp;lt; 1&lt;/code&gt; 化简得到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s ~= -k / (-c-0.5c^2) = 2k / (2c + c * c)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后得出公式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c = p^(1/k)
s = m / n = 2k / (2c + c * c)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;假定有n=10000000的数据量，则有理论值：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p &amp;lt; 0.1 and k = 1: s = m/n = 9.523810
p &amp;lt; 0.1 and k = 2: s = m/n = 5.461082
p &amp;lt; 0.1 and k = 3: s = m/n = 5.245850, space ~= 6.3MB
p &amp;lt; 0.1 and k = 4: s = m/n = 5.552045, space ~= 6.6MB

p &amp;lt; 0.01 and k = 1: s = m/n = 99.502488
p &amp;lt; 0.01 and k = 2: s = m/n = 19.047619
p &amp;lt; 0.01 and k = 3: s = m/n = 12.570636, space ~= 15MB
p &amp;lt; 0.01 and k = 4: s = m/n = 10.922165, space ~= 13MB

p &amp;lt; 0.001 and k = 1: s = m/n = 999.500250
p &amp;lt; 0.001 and k = 2: s = m/n = 62.261118
p &amp;lt; 0.001 and k = 3: s = m/n = 28.571429, space ~= 34MB
p &amp;lt; 0.001 and k = 4: s = m/n = 20.656961, space ~= 24.6MB

p &amp;lt; 0.0001 and k = 1: s = m/n = 9999.500025
p &amp;lt; 0.0001 and k = 2: s = m/n = 199.004975
p &amp;lt; 0.0001 and k = 3: s = m/n = 63.167063, space ~= 75.3MB
p &amp;lt; 0.0001 and k = 4: s = m/n = 38.095238, space ~= 45.4MB
p &amp;lt; 0.0001 and k = 5: s = m/n = 29.231432, space ~= 24.8MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，在k=3的情况下，其实已经可以达到我们平常使用所能的接受范围内了，没必要非得
使用最优解，除非在空间使用极为苛刻的情况下，而且这个公式，针对程序空间使用的调整，更加的灵活智能。&lt;/p&gt;

&lt;p&gt;特别提下，经过实测，如果每个hash的实现非常优质，分布很均匀的情况下，其实际的误判率比理论值低很多:&lt;/p&gt;

&lt;p&gt;就拿TBOX的bloom filter的实现做测试，n=10000000：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p &amp;lt; 0.01 and k = 3的情况下，其实际误判率为：0.004965
p &amp;lt; 0.001 and k = 3的情况下，其实际误判率为：0.000967
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;所以好的hash函数算法也是尤为的重要。&lt;/p&gt;

&lt;p&gt;下面来看下TBOX提供的bloom filter的使用，用起来也是相当的方便：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 总的元素个数
tb_size_t count = 10000000;

/* 初始化bloom filter
 *
 * TB_BLOOM_FILTER_PROBABILITY_0_01: 预定义的误判率，接近0.01
 * 注：由于内部使用位移数来表示：1 / 2^6 = 0.015625 ~= 0.01
 * 所以实际传入的误判率，有可能稍微大一点，但是还是相当接近的
 *
 * 3：为k值，hash函数的个数，最大不超过15个
 *
 * count：指定的元素规模数
 *
 * tb_item_func_long()：容器的元素类型，主要是用其内定的hash函数，如果要自定义hash函数，可以替换:
 *
 * tb_size_t tb_xxxxxx_hash(tb_item_func_t* func, tb_cpointer_t data, tb_size_t mask, tb_size_t index)
 * {
 *      // mask为hash掩码，index为第index个hash算法的索引
 *      return compute_hash(data, index) &amp;amp; mask;
 * }
 *
 * tb_item_func_t func = tb_item_func_long();
 * func.hash = tb_xxxxxx_hash;
 *
 * 来进行
 */
tb_bloom_filter_ref_t filter = tb_bloom_filter_init(TB_BLOOM_FILTER_PROBABILITY_0_01, 3, count, tb_item_func_long());

if (filter)
{
    tb_size_t i = 0;
    for (i = 0; i &amp;lt; count; i++)
    {
        // 产生随机数
        tb_long_t value = tb_random();
        
        // 设置值到filter内，如果不存在，则返回tb_true表示设置成功
        if (tb_bloom_filter_set(filter, (tb_cpointer_t)value))
        {
             // 添加元素成功，之前元素不存在
             // 不会存在误判
        }
        else
        {
             // 添加失败，添加的元素已经存在
             // 这里可能会存在误判
        }
        
        // 仅仅判断元素是否存在
        if (tb_bloom_filter_get(filter, (tb_cpointer_t)data)
        {
             // 元素已经存在
             // 这里可能会存在误判
        }
        else
        {
             // 元素不存在
             // 不会存在误判
        }
    }
    
    // 退出filter
    tb_bloom_filter_exit(filter);
}

// 常用预定义的误判率，也可以指定其他值，注：必须是位移数，而不是实际值
typedef enum __tb_bloom_filter_probability_e
{
    TB_BLOOM_FILTER_PROBABILITY_0_1         = 3 ///!&amp;lt; 1 / 2^3 = 0.125 ~= 0.1
,   TB_BLOOM_FILTER_PROBABILITY_0_01        = 6 ///!&amp;lt; 1 / 2^6 = 0.015625 ~= 0.01
,   TB_BLOOM_FILTER_PROBABILITY_0_001       = 10 ///!&amp;lt; 1 / 2^10 = 0.0009765625 ~= 0.001
,   TB_BLOOM_FILTER_PROBABILITY_0_0001      = 13 ///!&amp;lt; 1 / 2^13 = 0.0001220703125 ~= 0.0001
,   TB_BLOOM_FILTER_PROBABILITY_0_00001     = 16 ///!&amp;lt; 1 / 2^16 = 0.0000152587890625 ~= 0.00001
,   TB_BLOOM_FILTER_PROBABILITY_0_000001    = 20 ///!&amp;lt; 1 / 2^20 = 0.00000095367431640625 ~= 0.000001
        
}tb_bloom_filter_probability_e;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 03 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/tbox/2016/02/03/bloom-filter.html</link>
        <guid isPermaLink="true">http://tboox.org/cn/tbox/2016/02/03/bloom-filter.html</guid>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>Welcome to TBOOX!</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/logo2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/tboox/2016/01/30/welcome-to-tboox.html</link>
        <guid isPermaLink="true">http://tboox.org/tboox/2016/01/30/welcome-to-tboox.html</guid>
        
        
        <category>tboox</category>
        
      </item>
    
      <item>
        <title>欢迎来到TBOOX开源项目!</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/logo2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/tboox/2016/01/30/welcome-to-tboox.html</link>
        <guid isPermaLink="true">http://tboox.org/cn/tboox/2016/01/30/welcome-to-tboox.html</guid>
        
        
        <category>tboox</category>
        
      </item>
    
  </channel>
</rss>
