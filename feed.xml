<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX</title>
    <description>Welcome to the website for the TBOOX Open Source Project!</description>
    <link>http://tboox.org/</link>
    <atom:link href="http://tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Jul 2016 14:11:30 +0800</pubDate>
    <lastBuildDate>Wed, 06 Jul 2016 14:11:30 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>xmake v2.0.2 update!</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://xmake.io&quot;&gt;Website&lt;/a&gt;
&lt;a href=&quot;https://github.com/waruqi/xmake&quot;&gt;Sources&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Change install and uninstall actions&lt;/li&gt;
  &lt;li&gt;Update templates&lt;/li&gt;
  &lt;li&gt;Improve to check function&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/xmake/issues/7&quot;&gt;#7&lt;/a&gt;: Fix create project bug with ‘[targetname]’&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/xmake/issues/9&quot;&gt;#9&lt;/a&gt;: Support clang with c++11&lt;/li&gt;
  &lt;li&gt;Fix api scope leaks bug&lt;/li&gt;
  &lt;li&gt;Fix path bug for windows&lt;/li&gt;
  &lt;li&gt;Fix check function bug&lt;/li&gt;
  &lt;li&gt;Fix check toolchains failed&lt;/li&gt;
  &lt;li&gt;Fix compile failed for android on windows&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 06 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/07/06/update-v2.0.2/</link>
        <guid isPermaLink="true">http://tboox.org/2016/07/06/update-v2.0.2/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.0.2 更新!</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://xmake.io/cn&quot;&gt;主页&lt;/a&gt;
&lt;a href=&quot;https://github.com/waruqi/xmake&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;更新内容&lt;/h1&gt;

&lt;p&gt;此版本，主要修复一些bug和稳定性改善&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修改安装和卸载的action处理&lt;/li&gt;
  &lt;li&gt;更新工程模板&lt;/li&gt;
  &lt;li&gt;增强函数检测&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/xmake/issues/7&quot;&gt;#7&lt;/a&gt;: 修复用模板创建工程后，target名不对问题：’[targetname]’&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/xmake/issues/9&quot;&gt;#9&lt;/a&gt;: 修复clang不支持c++11的问题&lt;/li&gt;
  &lt;li&gt;修复api作用域泄露问题&lt;/li&gt;
  &lt;li&gt;修复在windows上的一些路径问题&lt;/li&gt;
  &lt;li&gt;修复检测宏函数失败问题&lt;/li&gt;
  &lt;li&gt;修复检测工具链失败问题&lt;/li&gt;
  &lt;li&gt;修复windows上编译android版本失败&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 06 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/2016/07/06/update-v2.0.2/</link>
        <guid isPermaLink="true">http://tboox.org/cn/2016/07/06/update-v2.0.2/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>publish xmake.io</title>
        <description>&lt;p&gt;We new a site for the open source project: xmake&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://xmake.io&quot;&gt;http://xmake.io&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/07/02/xmake-io/</link>
        <guid isPermaLink="true">http://tboox.org/2016/07/02/xmake-io/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake 新站发布：xmake.io</title>
        <description>&lt;p&gt;tboox.org 开源项目组织旗下开源项目xmake发布独立站点：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://xmake.io/cn&quot;&gt;http://xmake.io&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/2016/07/02/xmake-io/</link>
        <guid isPermaLink="true">http://tboox.org/cn/2016/07/02/xmake-io/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Run target</title>
        <description>&lt;p&gt;You can use xmake to run the given target and need not know where is the target program.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;p&gt;We define a simple target with named ‘test’.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;target(&quot;test&quot;)
    set_kind(&quot;console&quot;)
    add_files(&quot;*.c&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, we can run it directly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake r test
or xmake run test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake will compile it automaticly if the target has not been built.&lt;/p&gt;

</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/run-target/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/run-target/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Package target</title>
        <description>&lt;p&gt;Packages all targets for the current platform:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake p
xmake package
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Packages the target test to the output directory: /tmp&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake p -o /tmp test
xmake p --output=/tmp test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Packages targets for the iphoneos platform.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p iphoneos
xmake p 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can uses the macro plugin to package all architectures of the given platform.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# packages targets for all architectures of the current platform
xmake macro package 

# packages targets for all architectures of the iphoneos platform
xmake m package -p iphoneos

# packages targets with debug version for all architectures of the iphoneos platform and output to the directory: /tmp/output
xmake m package -p iphoneos -f &quot;-m debug&quot; -o /tmp/output
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/package-target/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/package-target/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Create project</title>
        <description>&lt;p&gt;xmake provides some project templates, you can easily create an empty project.&lt;/p&gt;

&lt;p&gt;Create a c++ console project：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    xmake create -l c++ -t 1 demo
 or xmake create --language=c++ --template=1 demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a c static library project：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    xmake create -l c -t 5 demo
 or xmake create --language=c --template=5 demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a c shared library project：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    xmake create -t 3 demo
 or xmake create --template=3 demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The default language is C language and &lt;code class=&quot;highlighter-rouge&quot;&gt;-t/--template&lt;/code&gt; argument is used to get specific types of templates.&lt;/p&gt;

&lt;p&gt;Only supports three templates which are console, static library and shared library.&lt;/p&gt;

&lt;p&gt;We will add some application templates in feature.&lt;/p&gt;

&lt;p&gt;We need note that the template’s ID is variable.&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake create --help&lt;/code&gt; to get more arguments info for template.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage: xmake create [options] [target]

Create a new project.

Options: 
    -n NAME, --name=NAME                   The project name.
    -f FILE, --file=FILE                   Create a given xmake.lua file. (default: xmake.lua)
    -P PROJECT, --project=PROJECT          Create from the given project directory.
                                           Search priority:
                                               1. The Given Command Argument
                                               2. The Envirnoment Variable: XMAKE_PROJECT_DIR
                                               3. The Current Directory
    -l LANGUAGE, --language=LANGUAGE       The project language (default: c)
                                               - c
                                               - c++
                                               - objc
                                               - objc++
                                               - swift
    -t TEMPLATE, --template=TEMPLATE       Select the project template id of the given language. (default: 1)
                                               - language: c
                                                 1. The Console Program
                                                 2. The Console Program (tbox)
                                                 3. The Shared Library
                                                 4. The Shared Library (tbox)
                                                 5. The Static Library
                                                 6. The Static Library (tbox)
                                               - language: c++
                                                 1. The Console Program
                                                 2. The Console Program (tbox)
                                                 3. The Shared Library
                                                 4. The Shared Library (tbox)
                                                 5. The Static Library
                                                 6. The Static Library (tbox)
                                               - language: objc
                                                 1. The Console Program
                                               - language: objc++
                                                 1. The Console Program
                                               - language: swift
                                                 1. The Console Program
                                           
    -v, --verbose                          Print lots of verbose information.
        --version                          Print the version number and exit.
    -h, --help                             Print this help message and exit.
                                           
    target                                 Create the given target.
                                           Uses the project name as target if not exists.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/create-project/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/create-project/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Compile project</title>
        <description>&lt;p&gt;Typically, you only need to execute the following command for compiling project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake will probe your host environment and target platform automaticly.&lt;/p&gt;

&lt;p&gt;The default mode is release and xmake will compile all targets.&lt;/p&gt;

&lt;p&gt;You can compile only one given target which name is ‘test’ for executing the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to complie the debug program, you need configure it for switching to the debug mode and compile it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake config --mode=debug
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We provide shorthand for each command, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -m debug
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please run &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake --help&lt;/code&gt; to get more info about it.&lt;/p&gt;

&lt;p&gt;We need to describe them for the debug and release compile mode in xmake.lua file, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- the debug mode
if is_mode(&quot;debug&quot;) then
    
    -- enable the debug symbols
    set_symbols(&quot;debug&quot;)

    -- disable optimization
    set_optimize(&quot;none&quot;)

    -- add defines for debug
    add_defines(&quot;__tb_debug__&quot;)
end

-- the release or profile modes
if is_mode(&quot;release&quot;, &quot;profile&quot;) then

    -- the release mode
    if is_mode(&quot;release&quot;) then
        
        -- set the symbols visibility: hidden
        set_symbols(&quot;hidden&quot;)

        -- strip all symbols
        set_strip(&quot;all&quot;)

        -- fomit the frame pointer
        add_cxflags(&quot;-fomit-frame-pointer&quot;)
        add_mxflags(&quot;-fomit-frame-pointer&quot;)

    -- the profile mode
    else
    
        -- enable the debug symbols
        set_symbols(&quot;debug&quot;)

    end

    -- for pc
    if is_arch(&quot;i386&quot;, &quot;x86_64&quot;) then
 
        -- enable fastest optimization
        set_optimize(&quot;fastest&quot;)

    -- for embed
    else
        -- enable smallest optimization
        set_optimize(&quot;smallest&quot;)
    end

    -- attempt to add vector extensions 
    add_vectorexts(&quot;sse2&quot;, &quot;sse3&quot;, &quot;ssse3&quot;, &quot;mmx&quot;)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can rebuild all targets：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake -r
or xmake --rebuild
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we can compile target with a gived architecture:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -a armv7
or xmake config --arch=armv7

   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to compile target for the iphoneos platform in macosx host, you can do it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -p iphoneos
or xmake f --plat=iphoneos

   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We need configure the NDK directory path for android platform.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -p android --ndk=xxxx
   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or we can configure the NDK path as global.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake g --ndk=xxxx
or xmake global --ndk=xxx

   xmake f -p android
   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please run &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --help&lt;/code&gt; to get more info about architecture and platform.&lt;/p&gt;

&lt;p&gt;We also can compile target using other cross-toolchains for the linux and android platfrom.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -p android -a armv7-a --cross=arm-linux-androideabi- --toolchains=/xxxx/bin
or xmake f -p linux --cross=arm-linux-androideabi- --toolchains=/toolsdk/bin --ldflags=&quot;-arch armv7 -L/use/lib -lm -lc -lz&quot; --cxflags=&quot;-I/usr/include&quot;
or xmake f -p mingw --sdk=/mingwsdk
or xmake f -p linux --sdk=/toolsdk

   xmake 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Uses &lt;code class=&quot;highlighter-rouge&quot;&gt;--clean&lt;/code&gt; argument for cleaning up all cached configuration&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -c
or xmake f --clean
   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or cleans target files&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# clean targets only
xmake -c
or xmake --clean

# clean all targets and temporary files 
or xmake --clean --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please run &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --help&lt;/code&gt; for getting more configuration info&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage: xmake config|f [options] [target]

Configure the project.

Options: 
    -c, --clean                            Clean the cached configure and configure all again.
                                           
    -p PLAT, --plat=PLAT                   Compile for the given platform. (default: macosx)
                                               - android
                                               - iphoneos
                                               - linux
                                               - macosx
                                               - mingw
                                               - watchos
                                               - windows
    -a ARCH, --arch=ARCH                   Compile for the given architecture. (default: auto)
                                               - android: armv5te armv6 armv7-a armv8-a arm64-v8a
                                               - iphoneos: armv7 armv7s arm64 i386 x86_64
                                               - linux: i386 x86_64
                                               - macosx: i386 x86_64
                                               - mingw: i386 x86_64
                                               - watchos: armv7 armv7s arm64 i386 x86_64
                                               - windows: x86 x64 amd64 x86_amd64
    -m MODE, --mode=MODE                   Compile for the given mode. (default: release)
                                               - debug
                                               - release
                                               - profile
    -k KIND, --kind=KIND                   Compile for the given target kind. (default: static)
                                               - static
                                               - shared
                                               - binary
        --host=HOST                        The current host environment. (default: macosx)
                                           
        --make=MAKE                        Set the make path. (default: auto)
        --ccache=CCACHE                    Enable or disable the c/c++ compiler cache. (default: auto)
                                           
        --cross=CROSS                      The cross toolchains prefix
                                           .e.g
                                               - i386-mingw32-
                                               - arm-linux-androideabi-
        --toolchains=TOOLCHAINS            The cross toolchains directory
                                           
        --cc=CC                            The C Compiler
        --cxx=CXX                          The C++ Compiler
        --cflags=CFLAGS                    The C Compiler Flags
        --cxflags=CXFLAGS                  The C/C++ compiler Flags
        --cxxflags=CXXFLAGS                The C++ Compiler Flags
                                           
        --as=AS                            The Assembler
        --asflags=ASFLAGS                  The Assembler Flags
                                           
        --sc=SC                            The Swift Compiler
        --scflags=SCFLAGS                  The Swift Compiler Flags
                                           
        --ld=LD                            The Linker
        --ldflags=LDFLAGS                  The Binary Linker Flags
                                           
        --ar=AR                            The Static Library Linker
        --arflags=ARFLAGS                  The Static Library Linker Flags
                                           
        --sh=SH                            The Shared Library Linker
        --shflags=SHFLAGS                  The Shared Library Linker Flags
                                           
        --ndk=NDK                          The NDK Directory
        --ndk_sdkver=NDK_SDKVER            The SDK Version for NDK (default: auto)
                                           
        --mm=MM                            The Objc Compiler
        --mxx=MXX                          The Objc++ Compiler
        --mflags=MFLAGS                    The Objc Compiler Flags
        --mxflags=MXFLAGS                  The Objc/c++ Compiler Flags
        --mxxflags=MXXFLAGS                The Objc++ Compiler Flags
                                           
        --xcode_dir=XCODE_DIR              The Xcode Application Directory (default: auto)
        --xcode_sdkver=XCODE_SDKVER        The SDK Version for Xcode (default: auto)
        --target_minver=TARGET_MINVER      The Target Minimal Version (default: auto)
                                           
        --mobileprovision=MOBILEPROVISION  The Provisioning Profile File (default: auto)
        --codesign=CODESIGN                The Code Signing Indentity (default: auto)
        --entitlements=ENTITLEMENTS        The Code Signing Entitlements (default: auto)
                                           
        --vs=VS                            The Microsoft Visual Studio (default: auto)
                                           
    -f FILE, --file=FILE                   Read a given xmake.lua file. (default: xmake.lua)
    -P PROJECT, --project=PROJECT          Change to the given project directory.
                                           Search priority:
                                               1. The Given Command Argument
                                               2. The Envirnoment Variable: XMAKE_PROJECT_DIR
                                               3. The Current Directory
    -o BUILDIR, --buildir=BUILDIR          Set the build directory. (default: build)
                                           
    -v, --verbose                          Print lots of verbose information.
        --version                          Print the version number and exit.
    -h, --help                             Print this help message and exit.
                                           
    target                                 Configure for the given target. (default: all)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/compile-project/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/compile-project/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>A simple xmake.lua</title>
        <description>&lt;p&gt;A simplest xmake.lua&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- define a target with named &#39;demo&#39;
target(&quot;demo&quot;)

    -- set the target kind, .e.g &#39;binary&#39; is a console program
    -- - static: a static library
    -- - shared: a shared library
    set_kind(&quot;binary&quot;)

    -- add all c source files in the directory: src
    add_files(&quot;src/*.c&quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we run the following command for building it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, we write another xmake.lua for switching ‘debug’ or ‘release’ mode.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- is debug now?
if is_mode(&quot;debug&quot;) then
    
    -- enable debug symbols for debugger
    set_symbols(&quot;debug&quot;)

    -- disable optimization
    set_optimize(&quot;none&quot;)
end

-- is release now?
if is_mode(&quot;release&quot;) then

    -- set visibility as hidden
    set_symbols(&quot;hidden&quot;)

    -- enable optimization for fastest mode
    set_optimize(&quot;fastest&quot;)

    -- strip all symbols
    set_strip(&quot;all&quot;)
end

-- define a target
target(&quot;test&quot;)

    -- set the program kind as a static library
    set_kind(&quot;static&quot;)

    -- add all c++ files recursively
    add_files(&quot;src/**.cpp&quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We configure this project with the debug mode now.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -m debug
#xmake config --mode=debug
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we build it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/a-simple-demo/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/a-simple-demo/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake后期发展随想</title>
        <description>&lt;p&gt;随着xmake v2.0.1 版本的发布，这大半年的辛苦总算告一段落，这个版本我基本上重构整个项目的90%的代码，几乎算是重写了，但结果还算挺满意的。。&lt;/p&gt;

&lt;p&gt;因为上个版本的架构设计的不是很好，不能很好进行扩展，也不支持插件模式，语法设计上也不严谨，容易出现各种隐患，这对于后期维护和发展来说，已经出现了不可逾越的瓶颈。。&lt;/p&gt;

&lt;p&gt;每个项目到了一定阶段，都是要不断重构，重新构思整体架构，才能使得项目不断的向好的方向演进。。&lt;/p&gt;

&lt;p&gt;（当然如果是公司项目就另当别论了，坑太多，历史负担较重，不是说要重构就能让你重构的。=。=）&lt;/p&gt;

&lt;p&gt;回归正题，目前xmake基本上所有模块都是可扩展的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;插件扩展&lt;/li&gt;
  &lt;li&gt;工程模板扩展&lt;/li&gt;
  &lt;li&gt;平台架构扩展&lt;/li&gt;
  &lt;li&gt;action扩展&lt;/li&gt;
  &lt;li&gt;option选项扩展&lt;/li&gt;
  &lt;li&gt;自定义task任务机制&lt;/li&gt;
  &lt;li&gt;宏脚本扩展&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;模块化和可扩展性，使得xmake整体是高度解耦的，整个core的内核算法实现非常轻量，其他模块如果我们想要扩展它，只需要把自己实现的脚本放到对应目录，就可以实现自注册，自加载。。&lt;/p&gt;

&lt;p&gt;并且每个插件模块内部都有严格的作用域控制、沙盒化处理，非常安全，不会干扰到其他插件。。&lt;/p&gt;

&lt;p&gt;下一个大版本，我打算开始研究下，怎么去实现完善的依赖包管理，目前的一些想法和构思：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;自动检测依赖包，如果存在直接链接编译，如果不存在，从远程仓库中自动下载对应版本，进行本地编译安装，然后自动集成和链接&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持多架构、多平台以及交叉平台的包管理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参考homebrew的包管理思想，将仓库放在项目中，通过git维护&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为了实现交叉平台的包管理，仓库的包描述，除了提供包原代码的url外，还提供移植描述脚本&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可能我说的有点模糊，先说说现有的一些包管理工具，例如：homebrew、apt-get、pacman等等。。&lt;/p&gt;

&lt;p&gt;大同小异，都是下载、自动编译、安装集成到系统中，不过都只能支持pc原有的主机平台，并不支持交叉平台&lt;/p&gt;

&lt;p&gt;例如：在windows上我要自动加载安装一个ios armv7s的包，集成到我的项目中。。这就不行了。&lt;/p&gt;

&lt;p&gt;而xmake的下个版本，打算做的就是这个，简单的说：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;我要做一个移植仓库，实现一人移植，万人使用&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以后，如果用xmake编译项目，这个项目中说需要链接 android 版本 armv7-a 的 libpng.a，那么xmake 就会先检测本地仓库是否存在，不存在的话，就会从移植仓库中，check处移植脚本，自动进行本地移植编译，然后链接到这个项目中去。。。&lt;/p&gt;

&lt;p&gt;明白了吗，是不是很有趣。。？&lt;/p&gt;

&lt;p&gt;现在的开源项目越来越多，平台也越来越多，但是很多c/c++项目的移植工作相当麻烦，不同项目编译方式区别很大，平台支持力度也各不一样。。&lt;/p&gt;

&lt;p&gt;而我们平常移植后，基本上只能自己使用，没法分享给别人&lt;/p&gt;

&lt;p&gt;而下个版本，xmake要做的就是让其他人不用重新再移植一边，只要有人移植过，把移植过程记录成移植脚本，push到xmake的移植仓库中，让所有人共享移植成果。。这是多美妙的一件事哈。。：）&lt;/p&gt;

&lt;p&gt;我表达能力有限，貌似有点啰嗦了，最后我对xmake的期望就是：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;它不仅仅是个跨平台构建工具，也将会成为移植神器，一人移植，万人共享就是xmake的目标！&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/2016/06/25/v2.1.1-goal/</link>
        <guid isPermaLink="true">http://tboox.org/cn/2016/06/25/v2.1.1-goal/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
  </channel>
</rss>
