<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX</title>
    <description>Welcome to the website for the TBOOX Open Source Project!</description>
    <link>http://tboox.org/</link>
    <atom:link href="http://tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 26 Jun 2016 19:28:41 +0800</pubDate>
    <lastBuildDate>Sun, 26 Jun 2016 19:28:41 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Run target</title>
        <description>&lt;p&gt;You can use xmake to run the given target and need not know where is the target program.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;p&gt;We define a simple target with named ‘test’.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;target(&quot;test&quot;)
    set_kind(&quot;console&quot;)
    add_files(&quot;*.c&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, we can run it directly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake r test
or xmake run test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake will compile it automaticly if the target has not been built.&lt;/p&gt;

</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/run-target/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/run-target/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Package target</title>
        <description>&lt;p&gt;Packages all targets for the current platform:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake p
xmake package
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Packages the target test to the output directory: /tmp&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake p -o /tmp test
xmake p --output=/tmp test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Packages targets for the iphoneos platform.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p iphoneos
xmake p 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can uses the macro plugin to package all architectures of the given platform.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# packages targets for all architectures of the current platform
xmake macro package 

# packages targets for all architectures of the iphoneos platform
xmake m package -p iphoneos

# packages targets with debug version for all architectures of the iphoneos platform and output to the directory: /tmp/output
xmake m package -p iphoneos -f &quot;-m debug&quot; -o /tmp/output
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/package-target/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/package-target/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Create project</title>
        <description>&lt;p&gt;xmake provides some project templates, you can easily create an empty project.&lt;/p&gt;

&lt;p&gt;Create a c++ console project：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    xmake create -l c++ -t 1 demo
 or xmake create --language=c++ --template=1 demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a c static library project：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    xmake create -l c -t 5 demo
 or xmake create --language=c --template=5 demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a c shared library project：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    xmake create -t 3 demo
 or xmake create --template=3 demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The default language is C language and &lt;code class=&quot;highlighter-rouge&quot;&gt;-t/--template&lt;/code&gt; argument is used to get specific types of templates.&lt;/p&gt;

&lt;p&gt;Only supports three templates which are console, static library and shared library.&lt;/p&gt;

&lt;p&gt;We will add some application templates in feature.&lt;/p&gt;

&lt;p&gt;We need note that the template’s ID is variable.&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake create --help&lt;/code&gt; to get more arguments info for template.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage: xmake create [options] [target]

Create a new project.

Options: 
    -n NAME, --name=NAME                   The project name.
    -f FILE, --file=FILE                   Create a given xmake.lua file. (default: xmake.lua)
    -P PROJECT, --project=PROJECT          Create from the given project directory.
                                           Search priority:
                                               1. The Given Command Argument
                                               2. The Envirnoment Variable: XMAKE_PROJECT_DIR
                                               3. The Current Directory
    -l LANGUAGE, --language=LANGUAGE       The project language (default: c)
                                               - c
                                               - c++
                                               - objc
                                               - objc++
                                               - swift
    -t TEMPLATE, --template=TEMPLATE       Select the project template id of the given language. (default: 1)
                                               - language: c
                                                 1. The Console Program
                                                 2. The Console Program (tbox)
                                                 3. The Shared Library
                                                 4. The Shared Library (tbox)
                                                 5. The Static Library
                                                 6. The Static Library (tbox)
                                               - language: c++
                                                 1. The Console Program
                                                 2. The Console Program (tbox)
                                                 3. The Shared Library
                                                 4. The Shared Library (tbox)
                                                 5. The Static Library
                                                 6. The Static Library (tbox)
                                               - language: objc
                                                 1. The Console Program
                                               - language: objc++
                                                 1. The Console Program
                                               - language: swift
                                                 1. The Console Program
                                           
    -v, --verbose                          Print lots of verbose information.
        --version                          Print the version number and exit.
    -h, --help                             Print this help message and exit.
                                           
    target                                 Create the given target.
                                           Uses the project name as target if not exists.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/create-project/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/create-project/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Compile project</title>
        <description>&lt;p&gt;Typically, you only need to execute the following command for compiling project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake will probe your host environment and target platform automaticly.&lt;/p&gt;

&lt;p&gt;The default mode is release and xmake will compile all targets.&lt;/p&gt;

&lt;p&gt;You can compile only one given target which name is ‘test’ for executing the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to complie the debug program, you need configure it for switching to the debug mode and compile it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake config --mode=debug
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We provide shorthand for each command, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -m debug
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please run &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake --help&lt;/code&gt; to get more info about it.&lt;/p&gt;

&lt;p&gt;We need to describe them for the debug and release compile mode in xmake.lua file, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- the debug mode
if is_mode(&quot;debug&quot;) then
    
    -- enable the debug symbols
    set_symbols(&quot;debug&quot;)

    -- disable optimization
    set_optimize(&quot;none&quot;)

    -- add defines for debug
    add_defines(&quot;__tb_debug__&quot;)
end

-- the release or profile modes
if is_mode(&quot;release&quot;, &quot;profile&quot;) then

    -- the release mode
    if is_mode(&quot;release&quot;) then
        
        -- set the symbols visibility: hidden
        set_symbols(&quot;hidden&quot;)

        -- strip all symbols
        set_strip(&quot;all&quot;)

        -- fomit the frame pointer
        add_cxflags(&quot;-fomit-frame-pointer&quot;)
        add_mxflags(&quot;-fomit-frame-pointer&quot;)

    -- the profile mode
    else
    
        -- enable the debug symbols
        set_symbols(&quot;debug&quot;)

    end

    -- for pc
    if is_arch(&quot;i386&quot;, &quot;x86_64&quot;) then
 
        -- enable fastest optimization
        set_optimize(&quot;fastest&quot;)

    -- for embed
    else
        -- enable smallest optimization
        set_optimize(&quot;smallest&quot;)
    end

    -- attempt to add vector extensions 
    add_vectorexts(&quot;sse2&quot;, &quot;sse3&quot;, &quot;ssse3&quot;, &quot;mmx&quot;)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can rebuild all targets：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake -r
or xmake --rebuild
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we can compile target with a gived architecture:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -a armv7
or xmake config --arch=armv7

   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to compile target for the iphoneos platform in macosx host, you can do it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -p iphoneos
or xmake f --plat=iphoneos

   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We need configure the NDK directory path for android platform.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -p android --ndk=xxxx
   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or we can configure the NDK path as global.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake g --ndk=xxxx
or xmake global --ndk=xxx

   xmake f -p android
   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please run &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --help&lt;/code&gt; to get more info about architecture and platform.&lt;/p&gt;

&lt;p&gt;We also can compile target using other cross-toolchains for the linux and android platfrom.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -p android -a armv7-a --cross=arm-linux-androideabi- --toolchains=/xxxx/bin
or xmake f -p linux --cross=arm-linux-androideabi- --toolchains=/toolsdk/bin --ldflags=&quot;-arch armv7 -L/use/lib -lm -lc -lz&quot; --cxflags=&quot;-I/usr/include&quot;
or xmake f -p mingw --sdk=/mingwsdk
or xmake f -p linux --sdk=/toolsdk

   xmake 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Uses &lt;code class=&quot;highlighter-rouge&quot;&gt;--clean&lt;/code&gt; argument for cleaning up all cached configuration&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   xmake f -c
or xmake f --clean
   xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or cleans target files&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# clean targets only
xmake -c
or xmake --clean

# clean all targets and temporary files 
or xmake --clean --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please run &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --help&lt;/code&gt; for getting more configuration info&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage: xmake config|f [options] [target]

Configure the project.

Options: 
    -c, --clean                            Clean the cached configure and configure all again.
                                           
    -p PLAT, --plat=PLAT                   Compile for the given platform. (default: macosx)
                                               - android
                                               - iphoneos
                                               - linux
                                               - macosx
                                               - mingw
                                               - watchos
                                               - windows
    -a ARCH, --arch=ARCH                   Compile for the given architecture. (default: auto)
                                               - android: armv5te armv6 armv7-a armv8-a arm64-v8a
                                               - iphoneos: armv7 armv7s arm64 i386 x86_64
                                               - linux: i386 x86_64
                                               - macosx: i386 x86_64
                                               - mingw: i386 x86_64
                                               - watchos: armv7 armv7s arm64 i386 x86_64
                                               - windows: x86 x64 amd64 x86_amd64
    -m MODE, --mode=MODE                   Compile for the given mode. (default: release)
                                               - debug
                                               - release
                                               - profile
    -k KIND, --kind=KIND                   Compile for the given target kind. (default: static)
                                               - static
                                               - shared
                                               - binary
        --host=HOST                        The current host environment. (default: macosx)
                                           
        --make=MAKE                        Set the make path. (default: auto)
        --ccache=CCACHE                    Enable or disable the c/c++ compiler cache. (default: auto)
                                           
        --cross=CROSS                      The cross toolchains prefix
                                           .e.g
                                               - i386-mingw32-
                                               - arm-linux-androideabi-
        --toolchains=TOOLCHAINS            The cross toolchains directory
                                           
        --cc=CC                            The C Compiler
        --cxx=CXX                          The C++ Compiler
        --cflags=CFLAGS                    The C Compiler Flags
        --cxflags=CXFLAGS                  The C/C++ compiler Flags
        --cxxflags=CXXFLAGS                The C++ Compiler Flags
                                           
        --as=AS                            The Assembler
        --asflags=ASFLAGS                  The Assembler Flags
                                           
        --sc=SC                            The Swift Compiler
        --scflags=SCFLAGS                  The Swift Compiler Flags
                                           
        --ld=LD                            The Linker
        --ldflags=LDFLAGS                  The Binary Linker Flags
                                           
        --ar=AR                            The Static Library Linker
        --arflags=ARFLAGS                  The Static Library Linker Flags
                                           
        --sh=SH                            The Shared Library Linker
        --shflags=SHFLAGS                  The Shared Library Linker Flags
                                           
        --ndk=NDK                          The NDK Directory
        --ndk_sdkver=NDK_SDKVER            The SDK Version for NDK (default: auto)
                                           
        --mm=MM                            The Objc Compiler
        --mxx=MXX                          The Objc++ Compiler
        --mflags=MFLAGS                    The Objc Compiler Flags
        --mxflags=MXFLAGS                  The Objc/c++ Compiler Flags
        --mxxflags=MXXFLAGS                The Objc++ Compiler Flags
                                           
        --xcode_dir=XCODE_DIR              The Xcode Application Directory (default: auto)
        --xcode_sdkver=XCODE_SDKVER        The SDK Version for Xcode (default: auto)
        --target_minver=TARGET_MINVER      The Target Minimal Version (default: auto)
                                           
        --mobileprovision=MOBILEPROVISION  The Provisioning Profile File (default: auto)
        --codesign=CODESIGN                The Code Signing Indentity (default: auto)
        --entitlements=ENTITLEMENTS        The Code Signing Entitlements (default: auto)
                                           
        --vs=VS                            The Microsoft Visual Studio (default: auto)
                                           
    -f FILE, --file=FILE                   Read a given xmake.lua file. (default: xmake.lua)
    -P PROJECT, --project=PROJECT          Change to the given project directory.
                                           Search priority:
                                               1. The Given Command Argument
                                               2. The Envirnoment Variable: XMAKE_PROJECT_DIR
                                               3. The Current Directory
    -o BUILDIR, --buildir=BUILDIR          Set the build directory. (default: build)
                                           
    -v, --verbose                          Print lots of verbose information.
        --version                          Print the version number and exit.
    -h, --help                             Print this help message and exit.
                                           
    target                                 Configure for the given target. (default: all)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/compile-project/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/compile-project/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>A simple xmake.lua</title>
        <description>&lt;p&gt;A simplest xmake.lua&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- define a target with named &#39;demo&#39;
target(&quot;demo&quot;)

    -- set the target kind, .e.g &#39;binary&#39; is a console program
    -- - static: a static library
    -- - shared: a shared library
    set_kind(&quot;binary&quot;)

    -- add all c source files in the directory: src
    add_files(&quot;src/*.c&quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we run the following command for building it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, we write another xmake.lua for switching ‘debug’ or ‘release’ mode.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- is debug now?
if is_mode(&quot;debug&quot;) then
    
    -- enable debug symbols for debugger
    set_symbols(&quot;debug&quot;)

    -- disable optimization
    set_optimize(&quot;none&quot;)
end

-- is release now?
if is_mode(&quot;release&quot;) then

    -- set visibility as hidden
    set_symbols(&quot;hidden&quot;)

    -- enable optimization for fastest mode
    set_optimize(&quot;fastest&quot;)

    -- strip all symbols
    set_strip(&quot;all&quot;)
end

-- define a target
target(&quot;test&quot;)

    -- set the program kind as a static library
    set_kind(&quot;static&quot;)

    -- add all c++ files recursively
    add_files(&quot;src/**.cpp&quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We configure this project with the debug mode now.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -m debug
#xmake config --mode=debug
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we build it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/26/a-simple-demo/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/26/a-simple-demo/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake后期发展随想</title>
        <description>&lt;p&gt;随着xmake v2.0.1 版本的发布，这大半年的辛苦总算告一段落，这个版本我基本上重构整个项目的90%的代码，几乎算是重写了，但结果还算挺满意的。。&lt;/p&gt;

&lt;p&gt;因为上个版本的架构设计的不是很好，不能很好进行扩展，也不支持插件模式，语法设计上也不严谨，容易出现各种隐患，这对于后期维护和发展来说，已经出现了不可逾越的瓶颈。。&lt;/p&gt;

&lt;p&gt;每个项目到了一定阶段，都是要不断重构，重新构思整体架构，才能使得项目不断的向好的方向演进。。&lt;/p&gt;

&lt;p&gt;（当然如果是公司项目就另当别论了，坑太多，历史负担较重，不是说要重构就能让你重构的。=。=）&lt;/p&gt;

&lt;p&gt;回归正题，目前xmake基本上所有模块都是可扩展的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;插件扩展&lt;/li&gt;
  &lt;li&gt;工程模板扩展&lt;/li&gt;
  &lt;li&gt;平台架构扩展&lt;/li&gt;
  &lt;li&gt;action扩展&lt;/li&gt;
  &lt;li&gt;option选项扩展&lt;/li&gt;
  &lt;li&gt;自定义task任务机制&lt;/li&gt;
  &lt;li&gt;宏脚本扩展&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;模块化和可扩展性，使得xmake整体是高度解耦的，整个core的内核算法实现非常轻量，其他模块如果我们想要扩展它，只需要把自己实现的脚本放到对应目录，就可以实现自注册，自加载。。&lt;/p&gt;

&lt;p&gt;并且每个插件模块内部都有严格的作用域控制、沙盒化处理，非常安全，不会干扰到其他插件。。&lt;/p&gt;

&lt;p&gt;下一个大版本，我打算开始研究下，怎么去实现完善的依赖包管理，目前的一些想法和构思：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;自动检测依赖包，如果存在直接链接编译，如果不存在，从远程仓库中自动下载对应版本，进行本地编译安装，然后自动集成和链接&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持多架构、多平台以及交叉平台的包管理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参考homebrew的包管理思想，将仓库放在项目中，通过git维护&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为了实现交叉平台的包管理，仓库的包描述，除了提供包原代码的url外，还提供移植描述脚本&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可能我说的有点模糊，先说说现有的一些包管理工具，例如：homebrew、apt-get、pacman等等。。&lt;/p&gt;

&lt;p&gt;大同小异，都是下载、自动编译、安装集成到系统中，不过都只能支持pc原有的主机平台，并不支持交叉平台&lt;/p&gt;

&lt;p&gt;例如：在windows上我要自动加载安装一个ios armv7s的包，集成到我的项目中。。这就不行了。&lt;/p&gt;

&lt;p&gt;而xmake的下个版本，打算做的就是这个，简单的说：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;我要做一个移植仓库，实现一人移植，万人使用&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以后，如果用xmake编译项目，这个项目中说需要链接 android 版本 armv7-a 的 libpng.a，那么xmake 就会先检测本地仓库是否存在，不存在的话，就会从移植仓库中，check处移植脚本，自动进行本地移植编译，然后链接到这个项目中去。。。&lt;/p&gt;

&lt;p&gt;明白了吗，是不是很有趣。。？&lt;/p&gt;

&lt;p&gt;现在的开源项目越来越多，平台也越来越多，但是很多c/c++项目的移植工作相当麻烦，不同项目编译方式区别很大，平台支持力度也各不一样。。&lt;/p&gt;

&lt;p&gt;而我们平常移植后，基本上只能自己使用，没法分享给别人&lt;/p&gt;

&lt;p&gt;而下个版本，xmake要做的就是让其他人不用重新再移植一边，只要有人移植过，把移植过程记录成移植脚本，push到xmake的移植仓库中，让所有人共享移植成果。。这是多美妙的一件事哈。。：）&lt;/p&gt;

&lt;p&gt;我表达能力有限，貌似有点啰嗦了，最后我对xmake的期望就是：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;它不仅仅是个跨平台构建工具，也将会成为移植神器，一人移植，万人共享就是xmake的目标！&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/2016/06/25/v2.1.1-goal/</link>
        <guid isPermaLink="true">http://tboox.org/cn/2016/06/25/v2.1.1-goal/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.0.1 update!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/waruqi/xmake&quot;&gt;Sources&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;changelog&quot;&gt;Changelog&lt;/h1&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add task api for running custom tasks&lt;/li&gt;
  &lt;li&gt;Add plugin expansion and provide some builtin plugins&lt;/li&gt;
  &lt;li&gt;Add export ide project plugin(.e.g makefile and will support to export other projects for vs, xcode in feature)&lt;/li&gt;
  &lt;li&gt;Add demo plugin for printing ‘hello xmake’&lt;/li&gt;
  &lt;li&gt;Add make doxygen documents plugin&lt;/li&gt;
  &lt;li&gt;Add macro script plugin&lt;/li&gt;
  &lt;li&gt;Add more modules for developing plugin&lt;/li&gt;
  &lt;li&gt;Add exception using try/catch and simplify grammar for plugin script&lt;/li&gt;
  &lt;li&gt;Add option bindings&lt;/li&gt;
  &lt;li&gt;Show progress when building&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Rewrite interpreter for xmake.lua&lt;/li&gt;
  &lt;li&gt;More strict syntax detection mechanism&lt;/li&gt;
  &lt;li&gt;More strict api scope for xmake.lua&lt;/li&gt;
  &lt;li&gt;Simplify template development&lt;/li&gt;
  &lt;li&gt;Extend platforms, tools, templates and actions fastly&lt;/li&gt;
  &lt;li&gt;Simplify api and support import modules&lt;/li&gt;
  &lt;li&gt;Remove dependence for gnu make/nmake, no longer need makefile&lt;/li&gt;
  &lt;li&gt;Optimize speed for building and faster x4 than v1.0.4&lt;/li&gt;
  &lt;li&gt;Optimize automatic detection&lt;/li&gt;
  &lt;li&gt;Modify some api name, but be compatible with the old version&lt;/li&gt;
  &lt;li&gt;Optimize merging static library&lt;/li&gt;
  &lt;li&gt;Simplify cross compilation using argument &lt;code class=&quot;highlighter-rouge&quot;&gt;--sdk=xxx&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Simplify boolean option for command line, .e.g &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config --xxx=[y|n|yes|no|true|false]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Merge iphoneos and iphonesimulator platforms&lt;/li&gt;
  &lt;li&gt;Merge watchos and watchsimulator platformss&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/xmake/issues/3&quot;&gt;#3&lt;/a&gt;: ArchLinux compilation failed&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/xmake/issues/4&quot;&gt;#4&lt;/a&gt;: Install failed for windows&lt;/li&gt;
  &lt;li&gt;Fix envirnoment variable bug for windows&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 09 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/2016/06/09/update-v2.0.1/</link>
        <guid isPermaLink="true">http://tboox.org/2016/06/09/update-v2.0.1/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.0.1 更新!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/waruqi/xmake&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;更新内容&lt;/h1&gt;

&lt;p&gt;此版本重构了90%的代码&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;增加task任务机制，可运行自定义任务脚本&lt;/li&gt;
  &lt;li&gt;实现plugin扩展机制，可以很方便扩展实现自定义插件，目前已实现的一些内置插件&lt;/li&gt;
  &lt;li&gt;增加project文件导出插件(目前已支持makefile的生成，后续会支持：vs, xcode等工程的生成)&lt;/li&gt;
  &lt;li&gt;增加hello xmake插件（插件demo）&lt;/li&gt;
  &lt;li&gt;增加doxygen文档生成插件&lt;/li&gt;
  &lt;li&gt;增加自定义宏脚本插件（支持动态宏记录、宏回放、匿名宏、批量导入、导出等功能）&lt;/li&gt;
  &lt;li&gt;增加更多的类库用于插件化开发&lt;/li&gt;
  &lt;li&gt;实现异常捕获机制，简化上层调用逻辑&lt;/li&gt;
  &lt;li&gt;增加多个option进行宏绑定，实现配置一个参数，就可以同时对多个配置进行生效&lt;/li&gt;
  &lt;li&gt;增加显示全局构建进度&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;重构整个xmake.lua描述文件的解释器，更加的灵活可扩展&lt;/li&gt;
  &lt;li&gt;更加严格的语法检测机制&lt;/li&gt;
  &lt;li&gt;更加严格的作用域管理，实现沙盒引擎，对xmake.lua中脚本进行沙盒化处理，使得xmake.lua更加的安全&lt;/li&gt;
  &lt;li&gt;简化模板的开发，简单几行描述就可以扩展一个新的自定义工程模板&lt;/li&gt;
  &lt;li&gt;完全模块化platforms、tools、templates、actions，以及通过自注册机制，只需把自定义的脚本放入对应目录，就可实现快速扩展&lt;/li&gt;
  &lt;li&gt;针对所有可扩展脚本所需api进行大量简化，并实现大量类库，通过import机制进行导入使用&lt;/li&gt;
  &lt;li&gt;移除对gnu make/nmake等make工具的依赖，不再需要makefile，实现自己的make算法，&lt;/li&gt;
  &lt;li&gt;优化构建速度，支持多任务编译(支持vs编译器)（实测：比v1.0.4提升x4倍的构建性能）&lt;/li&gt;
  &lt;li&gt;优化自动检测机制，更加的稳定和准确&lt;/li&gt;
  &lt;li&gt;修改部分工程描述api，增强扩展性，减少一些命名歧义（对低版本向下兼容）&lt;/li&gt;
  &lt;li&gt;优化静态库合并：&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.a&quot;)&lt;/code&gt;，修复一些bug&lt;/li&gt;
  &lt;li&gt;优化交叉编译，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;--sdk=xxx&lt;/code&gt;参数实现更加方便智能的进行交叉编译配置，简化mingw平台的编译配置&lt;/li&gt;
  &lt;li&gt;简化命令行配置开关, 支持&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config --xxx=[y|n|yes|no|true|false]&lt;/code&gt;等开关值&lt;/li&gt;
  &lt;li&gt;合并iphoneos和iphonesimulator平台，以及watchos和watchsimulator平台，通过arch来区分，使得打包更加方便，能够支持一次性打包iphoneos的所有arch到一个包中&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/xmake/issues/3&quot;&gt;#3&lt;/a&gt;: 修复ArchLinux 编译失败问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/xmake/issues/4&quot;&gt;#4&lt;/a&gt;: 修复windows上安装失败问题&lt;/li&gt;
  &lt;li&gt;修复windows上环境变量设置问题&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 09 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/2016/06/09/update-v2.0.1/</link>
        <guid isPermaLink="true">http://tboox.org/cn/2016/06/09/update-v2.0.1/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>插件开发之类库使用</title>
        <description>&lt;p&gt;xmake通过import接口，可以在自定义脚本中导入各种内置类库和扩展类库模块，使得xmake的插件开发具有更多的灵活性，提供更丰富的功能。&lt;/p&gt;

&lt;p&gt;我们先看下，目前xmake提供的一些类库：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── _g.lua
├── assert.lua
├── catch.lua
├── coroutine.lua
├── debug.lua
├── finally.lua
├── format.lua
├── ifelse.lua
├── import
│   └── core
│       ├── base
│       │   └── option.lua
│       ├── platform
│       │   ├── environment.lua
│       │   ├── menu.lua
│       │   └── platform.lua
│       ├── project
│       │   ├── cache.lua
│       │   ├── config.lua
│       │   ├── global.lua
│       │   ├── history.lua
│       │   ├── menu.lua
│       │   ├── package.lua
│       │   ├── project.lua
│       │   ├── target.lua
│       │   ├── task.lua
│       │   └── template.lua
│       └── tool
│           ├── compiler.lua
│           ├── linker.lua
│           └── tool.lua
├── import.lua
├── inherit.lua
├── insert.lua
├── io.lua
├── ipairs.lua
├── math.lua
├── os.lua
├── pairs.lua
├── path.lua
├── print.lua
├── printf.lua
├── raise.lua
├── string.lua
├── table.lua
├── tonumber.lua
├── tostring.lua
├── try.lua
├── utils.lua
└── vformat.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在根目录下的模块和api都是属于内建的，不需要import也可以直接使用，属于常用api，提供了xmake最基础的特性。。&lt;/p&gt;

&lt;p&gt;在子目录下的是扩展模块，需要import后才能使用，导入规则见&lt;a href=&quot;/cn/2016/06/09/api-import/&quot;&gt;import&lt;/a&gt;，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import(&quot;core.project.task&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;需要注意的是：xmake对自定义的脚本采用了异常处理机制，大部分情况下，调用的api是不需要判断返回值状态是否成功，如果出错了，会立即中断，并且显示错误信息&lt;/p&gt;

&lt;p&gt;这样语法上更加的精简可读，并且更安全，所有api的输入输出，内部都有检测，状态不对会立即自动报错。&lt;/p&gt;

&lt;p&gt;当然如果我们想要自己获取这个异常的状态，做一些逻辑上的处理，可以通过try/catch来实现，使用起来也非常简单。&lt;/p&gt;

&lt;p&gt;下面简单介绍下一些常用的内置模块api，这些模块不需要import就可以使用的哦。：）&lt;/p&gt;

&lt;h4 id=&quot;os&quot;&gt;os模块&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 运行shell命令，如果运行失败直接中断，并显示出错信息，我们不需要判断返回值
os.run(&quot;echo hello xmake!&quot;)

-- 复制文件
os.cp(&quot;/tmp/src&quot;, &quot;/tmp/dst&quot;)

-- 删除文件或者目录
os.rm(&quot;/tmp/dir&quot;)

-- 移动文件
os.mv(&quot;/tmp/old&quot;, &quot;/tmp/new&quot;)

-- 判断文件是否存在
if os.isfile(&quot;/tmp/file&quot;) then
end

-- 判断目录是否存在
if os.isdir(&quot;/tmp/dir&quot;) then
end

-- 匹配遍历文件，*为非递归匹配，**为递归匹配
for _, file in ipairs(os.match(&quot;src/*.c&quot;)) do
    print(file)
end

-- 匹配遍历目录，*为非递归匹配，**为递归匹配
for _, file in ipairs(os.match(&quot;src/*&quot;, true)) do
    print(file)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;api&quot;&gt;常用api&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 抛出异常，立即中断
raise()

-- 抛出异常，立即中断，并抛出异常错误信息
raise(&quot;error info&quot;)

-- 抛出异常，立即中断，并抛出异常错误代码
raise(-1)

-- 显示输出并换行，支持格式化输出，跟lua的print稍有不同
print(&quot;hello %s&quot;, &quot;xmake&quot;)

-- 显示输出不换行
printf(&quot;hello %s&quot;, &quot;xmake&quot;)

-- 格式化字符串
s = format(&quot;hello %s&quot;, &quot;xmake&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;api-1&quot;&gt;异常捕获api&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try
{
    -- try块，里面抛出异常
    function ()
        raise(&quot;error&quot;)
    end,

    catch
    {
        -- catch块，捕获异常
        function (errors)
            print(errors)
        end
    }
}

-- 获取try块的返回值，如果没有异常的话返回true
local ok = try
{
    -- try块，里面抛出异常
    function ()
        -- may be error
        return true
    end
}

try
{
    -- try块，里面抛出异常
    function ()
        raise(&quot;error&quot;)
    end,

    catch
    {
        -- catch块，捕获异常
        function (errors)
            print(errors)
        end
    },

    finally
    { 
        -- finally 块
        function ()
        end
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;path&quot;&gt;path模块&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 获取相对路径
path.relative(&quot;/tmp/a&quot;)

-- 获取绝对路径
path.absolute(&quot;src&quot;)

-- 获取目录
path.directory(&quot;/tmp/a&quot;)

-- 获取文件名 test.c
path.filename(&quot;/tmp/test.c&quot;)

-- 获取base名 test
path.basename(&quot;/tmp/test.c&quot;)

-- 获取扩展名
path.extension(&quot;/tmp/test.c&quot;)

-- 拼接路径 /tmp/test.c
path.join(&quot;/tmp&quot;, &quot;test.c&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;io-&quot;&gt;io 模块&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 打开一个写文件
file = io.open(&quot;/tmp/a&quot;, &quot;w&quot;)

-- 写文件数据
file:write(&quot;hello&quot;)

-- 写文件格式化行
file:print(&quot;hello %s&quot;, &quot;xmake&quot;)

-- 写文件格式化不换行
file:printf(&quot;hello %s&quot;, &quot;xmake&quot;)

-- 关闭文件
file:close()

-- 序列化写一个lua对象到文件
io.save(&quot;/tmp/a&quot;, object)

-- 反序列化读取一个文件对象
object = io.load(&quot;/tmp/a&quot;)

-- 读取文件数据，并显示
io.cat(&quot;/tmp/a&quot;)

-- 模式替换文件内容, 替换空格字符为 &quot;space&quot;
io.gsub(&quot;/tmp/a&quot;, &quot;%s&quot;, &quot;space&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还有一些是lua的常用模块，这里就不多说了，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;string, table, debug, coroutine, pairs, ipairs, tostring, tonumber&lt;/code&gt; 等等&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/2016/06/09/plugin-modules/</link>
        <guid isPermaLink="true">http://tboox.org/cn/2016/06/09/plugin-modules/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>插件使用之宏脚本记录</title>
        <description>&lt;p&gt;xmake 提供了一些内置的比较实用的插件，其中宏脚本插件是最具有代表性和实用性的，也是xmake比较推荐的一款插件，那它有哪些使用功能呢？&lt;/p&gt;

&lt;p&gt;我们先来看下：&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake macro --help&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage: xmake macro|m [options] [name] [arguments]

Run the given macro.

Options: 
        --backtrace                        Print backtrace information for debugging.
        --version                          Print the version number and exit.
    -h, --help                             Print this help message and exit.
                                           
    -F FILE, --file=FILE                   Read a given xmake.lua file.
    -P PROJECT, --project=PROJECT          Change to the given project directory.
                                           Search priority:
                                               1. The Given Command Argument
                                               2. The Envirnoment Variable: XMAKE_PROJECT_DIR
                                               3. The Current Directory
                                           
    -v, --verbose                          Print lots of verbose information.
    -b, --begin                            Start to record macro.
                                           .e.g
                                           Record macro with name: test
                                               xmake macro --begin
                                               xmake config --plat=macosx
                                               xmake clean
                                               xmake -r
                                               xmake package
                                               xmake macro --end test
    -e, --end                              Stop to record macro.
                                           
        --show                             Show the content of the given macro.
    -l, --list                             List all macros.
    -d, --delete                           Delete the given macro.
    -c, --clear                            Clear the all macros.
                                           
        --import=IMPORT                    Import the given macro file or directory.
                                           .e.g
                                               xmake macro --import=/xxx/macro.lua test
                                               xmake macro --import=/xxx/macrodir
        --export=EXPORT                    Export the given macro to file or directory.
                                           .e.g
                                               xmake macro --export=/xxx/macro.lua test
                                               xmake macro --export=/xxx/macrodir
                                           
    name                                   Set the macro name. (default: .)
                                           .e.g
                                              Run the given macro:     xmake macro test
                                              Run the anonymous macro: xmake macro .
    arguments ...                          Set the macro arguments.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看帮助菜单描述，它提供了一些功能：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;手动记录和回放多条执行过的xmake命令&lt;/li&gt;
  &lt;li&gt;支持快速的匿名宏创建和回放&lt;/li&gt;
  &lt;li&gt;支持命名宏的长久记录和重用&lt;/li&gt;
  &lt;li&gt;支持宏脚本的批量导入和导出&lt;/li&gt;
  &lt;li&gt;支持宏脚本的删除、显示等管理功能&lt;/li&gt;
  &lt;li&gt;支持自定义高级宏脚本，以及参数配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;看功能还是蛮多的，那这个宏脚本主要用于哪些场景呢，比如：&lt;/p&gt;

&lt;p&gt;我们需要编译打包各个平台的所有架构的库，如果按照每次：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p android --ndk=/xxx/ndk -a armv7-a
xmake p
xmake f -p mingw --sdk=/mingwsdk
xmake p
xmake f -p linux --sdk=/toolsdk --toolchains=/xxxx/bin
xmake p
xmake f -p iphoneos -a armv7
xmake p
xmake f -p iphoneos -a arm64
xmake p
xmake f -p iphoneos -a armv7s
xmake p
xmake f -p iphoneos -a i386
xmake p
xmake f -p iphoneos -a x86_64
xmake p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那还是相当累人的，而且这些命令有可能需要重复执行，每次都这么敲一遍多累啊，如果像交叉编译这种，配置参数更多更复杂的情况，那么会更累&lt;/p&gt;

&lt;p&gt;这个时候就需要宏脚本出场了，而且这些宏记录下来后，你可以导出它们，提供给其他人使用，而不需要每次叫他们如何去配置，如何去编译打包了&lt;/p&gt;

&lt;p&gt;闲话少说，我们先来看下如何记录一个简单宏脚本。。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 开始记录宏
xmake macro --begin

# 执行一些xmake命令
xmake f -p android --ndk=/xxx/ndk -a armv7-a
xmake p
xmake f -p mingw --sdk=/mingwsdk
xmake p
xmake f -p linux --sdk=/toolsdk --toolchains=/xxxx/bin
xmake p
xmake f -p iphoneos -a armv7
xmake p
xmake f -p iphoneos -a arm64
xmake p
xmake f -p iphoneos -a armv7s
xmake p
xmake f -p iphoneos -a i386
xmake p
xmake f -p iphoneos -a x86_64
xmake p

# 结束宏记录，这里不设置宏名字，所以记录的是一个匿名宏
xmake macro --end 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;好了，接下来我们就开始回放执行这个宏了。。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 之前最近记录的一次匿名宏
xmake macro .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;匿名宏的好处就是快速记录，快速回放，如果需要长久保存，就需要给宏去个名字，也很简单：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 结束记录，并且命名为test宏
xmake macro --end test

# 回放这个test宏
xmake macro test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;宏的管理：删除、导入、导出这些比较简单，可以敲：&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake macro --help&lt;/code&gt; 自行看下&lt;/p&gt;

&lt;p&gt;我们来看下宏脚本记录下来的内容：&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake macro --show test&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function main()
    
    os.exec(&quot;xmake f -p android --ndk=/xxx/ndk -a armv7-a&quot;)
    os.exec(&quot;xmake p&quot;)
    os.exec(&quot;xmake f -p mingw --sdk=/mingwsdk&quot;)
    os.exec(&quot;xmake p&quot;)
    os.exec(&quot;xmake f -p linux --sdk=/toolsdk --toolchains=/xxxx/bin&quot;)
    os.exec(&quot;xmake p&quot;)
    os.exec(&quot;xmake f -p iphoneos -a armv7&quot;)
    os.exec(&quot;xmake p&quot;)
    os.exec(&quot;xmake f -p iphoneos -a arm64&quot;)
    os.exec(&quot;xmake p&quot;)
    os.exec(&quot;xmake f -p iphoneos -a armv7s&quot;)
    os.exec(&quot;xmake p&quot;)
    os.exec(&quot;xmake f -p iphoneos -a i386&quot;)
    os.exec(&quot;xmake p&quot;)
    os.exec(&quot;xmake f -p iphoneos -a x86_64&quot;)
    os.exec(&quot;xmake p&quot;)  
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实就是个lua的脚本，里面你可以使用一切插件开发中使用的类库和内建api，你可以通过import导入他们来使用，并编写一些高级的宏脚本。。&lt;/p&gt;

&lt;p&gt;更加高级的宏脚本写法可以参考：&lt;a href=&quot;/cn/2016/06/09/plugin-macro-package/&quot;&gt;插件使用之批量打包&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://tboox.org/cn/2016/06/09/plugin-macro/</link>
        <guid isPermaLink="true">http://tboox.org/cn/2016/06/09/plugin-macro/</guid>
        
        
        <category>xmake</category>
        
      </item>
    
  </channel>
</rss>
