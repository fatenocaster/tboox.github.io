<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX Open Source Project</title>
    <description>Focus on cross-platform development using c language</description>
    <link>http://www.tboox.org/</link>
    <atom:link href="http://www.tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 28 Jul 2016 16:08:27 +0800</pubDate>
    <lastBuildDate>Thu, 28 Jul 2016 16:08:27 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>手写数字识别系统之图像分割</title>
        <description>&lt;p&gt;最近闲来无事，打算把之前在其他博客站点写的一些跟tboox项目相关的老文，放到我的个人站点上来&lt;/p&gt;

&lt;p&gt;并且整理归纳了下，以前学生时期研究的一些的玩意用到的一些技术，例如（手写识别、分形图像等等什么的。。）&lt;/p&gt;

&lt;p&gt;以后就重点吧这个站点，作为我的个人博客主站了。。嘿嘿。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;本文，主要介绍我之前在学校时候，研究的一些跟手写数字识别相关的技术心得，主要涉及：数字图像处理、特征提取、神经网络等等相关的一些技术。。&lt;/p&gt;

&lt;p&gt;虽然很多用到的还是网上现有的比较成熟的算法，但是在这些基础上，我还是有做了不少算法上的改进的。。&lt;/p&gt;

&lt;p&gt;并且为了写这个项目，我当时还特地写了一整套神经网络库，从图像处理开始到最后的识别过程，没有使用任何第三方库，都是从0还是写起
也没有用到opencv啊什么的。&lt;/p&gt;

&lt;p&gt;上层ui当时用的qt，虽然当时也算是为了跨平台，但那个时候毕竟还是学生，代码经验欠缺，因此我的基础库对跨平台处理的并不是很好。。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;那个基础库，我稍微简单说下，那是我的第一个开发库，是一个类似boost的c++模板库，里面用到了很多c++的模板元编程的特性，但是现在已经对c++无爱了，所以早已废弃不用了。

不过也就是这个库的开发，很大程度上影响了我之后的编码风格，也是至此之后，我重点转向了对c的开发上。。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这套识别系统，仅仅是我当时为了学习神经网络，拿来练手用的，没法跟那些成熟的相比，识别率不是很高哈，只能给大家用来参考学习了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;本文在基本BP算法和数字图像与处理的基础上，通过改进网络、图像处理算法，并结合实践来探索如何实现具有高鲁棒的、高精度的、高效率的脱机数字识别。&lt;/p&gt;

&lt;p&gt;在这我主要研究脱机单体数字识别，其主要步骤为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/overview_1.jpg&quot; alt=&quot;overview_1&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;数字样本的采集&lt;/h4&gt;

&lt;p&gt;主要采用5行10列的数字样本规格。采集方式是通过扫描样本卡片来获取图像，也尽量避免样本了的失真，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/overview_2.jpg&quot; alt=&quot;overview_2&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;图像二值化&lt;/h4&gt;

&lt;p&gt;主要采用全局阈值分割法和自适应的局部阈值分割法，来实现在不同亮度背景下的自适应分割，并对结果进行比对。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;数字提取&lt;/h4&gt;

&lt;p&gt;目前主要考虑聚类法、矩阵式分割法、连通区域标记法，并比较其优劣，选取效果最好的一种算法。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;图像归一化&lt;/h4&gt;

&lt;p&gt;主要采用双线性内插和最邻近内插来实现放大，为了减少图像在收缩时带来的失真，目前打算采用求平均法来实现。&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;特征提取&lt;/h4&gt;

&lt;p&gt;主要采用逐像素提取法，PCA主成分提取两种方法来实现。&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;样本学习&lt;/h4&gt;

&lt;p&gt;主要采用基于BP算法（反向传播学习算法）的神经网络进行识别，并对BP进行一定的改进和优化，来改进训练效果并且适当的提高训练速率。&lt;/p&gt;

&lt;p&gt;目前，针对BP的改进算法，主要采添加动量项和自适应步长法。&lt;/p&gt;

&lt;p&gt;而对于BP算法，其主要步骤为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    前向计算=〉反向计算=〉权值修正=〉循环迭代
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为了进一步改进网络，实现高精度、高效率的识别，打算考虑采用多网络集成法，来进行优化。
主要针对不同权值、隐层数的基本BP网络进行集成。通过每个网络分类的结果进行加权输出，来达到有效的分类。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;阈值分割&lt;/h2&gt;

&lt;p&gt;阈值分割法是一种基于区域的图像分割技术，其基本原理是：通过设定不同的特征阈值，把图像像素点分为若干类。&lt;/p&gt;

&lt;p&gt;在本文中，我们主要处理针对两类的分割，令阈值为T，图像像素对应的灰度级为&lt;code class=&quot;highlighter-rouge&quot;&gt;f(x, y)&lt;/code&gt;，那么经阈值分割后的图像&lt;code class=&quot;highlighter-rouge&quot;&gt;g(x, y)&lt;/code&gt;定义为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/split_1.jpg&quot; alt=&quot;split_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此，标记为1的像素对应于对象，也就是前景，而标记为0的对象对应于背景，也就是我们通常所说的图像二值化。&lt;/p&gt;

&lt;p&gt;利用阈值分割进行图像二值化的主要难题就是阈值的选取，事实证明，阈值的选择的恰当与否对分割的效果起着决定性的作用。&lt;/p&gt;

&lt;p&gt;常用的阈值分割方法有以下三种：&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;整体阈值法&lt;/h4&gt;

&lt;p&gt;利用整幅图像的信息对图像求出最优阈值, 在二值化分割过程中只使用这一个固定阈值，因此计算量小，但对于亮度条件不好的图像的分割效果较差。&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;局部阈值法&lt;/h4&gt;

&lt;p&gt;它是把原始图像分为几个小的子图像，再对每个子图像求出最佳阈值。因此效果较好，但开销较大，且局部大小不太好确定，太小容易失真，太大效果不显著。&lt;/p&gt;

&lt;h4 id=&quot;section-11&quot;&gt;动态阈值法&lt;/h4&gt;

&lt;p&gt;它的阈值求取方法不仅取决于该像素的灰度值及其领域内像素灰度值, 而且还与像素的坐标位置有关, 这种方法灵活性大, 但是复杂度高, 计算量和时间开销都比较大。&lt;/p&gt;

&lt;p&gt;而冈萨雷斯写的那本书&lt;a href=&quot;/cn/book/&quot;&gt;数字图像处理&lt;/a&gt;里面，给出了一种最小误差阈值，通过利用共轭梯度法对灰度直方图进行双峰的高斯密度曲线进行拟合，求取最佳阈值，效果相当好，但是计算太大，而且对于双峰不显著的图像比较难处理，还需进行附加的单峰检测，并进行插值处理，由于过于复杂且实现也相当困难。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/split_2.jpg&quot; alt=&quot;split_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而本文采用具有自适应性的OTSU局部阈值法来分割图像，并对OTSU和局部阈值法进行了改进，不仅提高了性能而且改善了分割效果，对于亮度不均匀的图像也能实现较好的分割。&lt;/p&gt;

&lt;h4 id=&quot;otsu&quot;&gt;最大类间方差法（OTSU）&lt;/h4&gt;

&lt;p&gt;由Otsu于1978年提出的最大类间方差法以其计算简单、稳定有效，一直广为使用。其主要思想就是选取阈值使其类内方差最小化或类间方差最大化。Otsu算法不仅计算简单，而且能够应用于多阈值确定，因此可以说是一种相当好的阈值选取方法。
我们通常采用最大化类间方差，来实现阈值分割，其类间方差定义为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/otsu_1.jpg&quot; alt=&quot;otsu_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;u&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;图像中总的灰度均值&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;u1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;图像中小于阈值T的像素灰度均值&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;u2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;图像中大于阈值T的像素灰度均值&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;n1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;图像中小于阈值T的像素数&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;n2&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;图像中大于阈值T的像素数&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;因此，只需通过遍历256个灰度级，寻找使其类间方差最大的那个灰度值就是最佳阈值T。&lt;/p&gt;

&lt;h4 id=&quot;otsu-1&quot;&gt;OTSU的实现与改进&lt;/h4&gt;

&lt;p&gt;然而如果每次遍历都需要重新计算阈值两边的均值与像素数的话计算量是相当大的，如果能够在下次遍历时利用上次计算的结果，那么计算量可以大大减少。
假设灰度直方图为，图像总均值为，图像总像素数为，那么其递推方式如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/otsu_2.png&quot; alt=&quot;otsu_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了进一步简化计算，我们可以通过用&lt;img src=&quot;/static/img/hnr/otsu_3.jpg&quot; alt=&quot;otsu_3&quot; /&gt;来替换，得到&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/otsu_4.png&quot; alt=&quot;otsu_4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于n在递归中不变可以省略，因此可以改为&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/otsu_5.png&quot; alt=&quot;otsu_5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于本文是针对字符图像的分割，由于字符的笔画通常较细，通常只占图像的1/4都不到，因此可以适当的调整阈值，以实现较好的分割效果，改进后的阈值为&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/otsu_6.png&quot; alt=&quot;otsu_6&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-12&quot;&gt;局部阈值的实现与改进&lt;/h4&gt;

&lt;p&gt;然而在实际图像中, 由于噪声或其他干扰等因素的影响，OTSU阈值分割并不能使图像分割得到满意的结果, 往往会产生严重的分割错误。这是因为图像的灰度直方图分布不一定
出现明显的峰和谷, 像素灰度值仅仅反映了像素灰度级的幅值大小, 并没有反映出像素与邻域的空间相关信息。&lt;/p&gt;

&lt;p&gt;通过具体的实验发现：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;当图像亮度分布不均匀时，往往无法得到好的分割效果，通常会出现大块的黑块，或者过渡分割而丢失信息的情况。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因此，可以通过对图像进行分块，针对每一小块进行OTSU分割，可以减少这些情况的发生，但是这又会出现不希望的“棋盘”效果，为了避免这种情况的发生，可以采用如下改进的局部阈值算法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;遍历图像中每一像素，在该像素的邻域内进行灰度统计，计算OTSU阈值，并仅对该点进行阈值分割。

这样就能在较好的分割效果下实现像素平滑过渡，避免了“棋盘”效应，由于在当像素移动时，只有一行或一列改变，所以可以在每步移动中，以新数据更新前一个位置得到的直方图，从而避免了每次重新计算整个直方图，大大减少了计算量，使其在一个可接受的范围内。

为了防止部分区域受到噪声干扰而产生的黑块现象，可以在进行局部阈值处理前，进行三阶的平滑处理，效果相当显著。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-13&quot;&gt;结果&lt;/h2&gt;

&lt;h4 id=&quot;section-14&quot;&gt;原图&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/split_3.jpg&quot; alt=&quot;split_3&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-15&quot;&gt;经全局阈值处理后的图象&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/split_4.jpg&quot; alt=&quot;split_4&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-16&quot;&gt;经改进的局部阈值处理后的图像&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/split_5.jpg&quot; alt=&quot;split_5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;由上图可见，经改进的局部阈值处理后的图像的效果还是相当明显的，可是还是有些不足之处。。&lt;/p&gt;

&lt;p&gt;就是处理后的图像笔画较粗，容易填掉数字中的空洞，尤其是4，6，8，9这些含有小孔的数字，这些都有待进一步改进。&lt;/p&gt;

&lt;p&gt;后续，我还会总结下：倾斜矫正、数字提取、特征提取、神经网络相关的一些心得和改进算法。。&lt;/p&gt;

&lt;p&gt;最后，再贴两张hnr项目，界面截图哈。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/hnr/before.png&quot; alt=&quot;before&quot; /&gt;
&lt;img src=&quot;/static/img/hnr/after.png&quot; alt=&quot;after&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/07/28/hnr-split-image/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/07/28/hnr-split-image/</guid>
        
        <category>手写数字识别</category>
        
        <category>神经网络</category>
        
        <category>人工智能</category>
        
        <category>图像分割</category>
        
        <category>区域二值化</category>
        
        <category>adaboost</category>
        
        
        <category>hnr</category>
        
      </item>
    
      <item>
        <title>The x86 Script Instruction Virtual Machine</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is a very simple and lightweight x86 virtual machine which can load and run the assembly code from ida pro directly.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Supports cross-platform and it’s able to run the x86 assembly code on linux, windows, maxosx, android and ios …&lt;/li&gt;
  &lt;li&gt;Supports the frequently-used x86 assembly instruction (.e.g logical operations, goto, loop, call, stack operations …)&lt;/li&gt;
  &lt;li&gt;Supports call the third-party library interfaces. (.e.g libc ..)&lt;/li&gt;
  &lt;li&gt;We can pass arguments and get the return results after running.&lt;/li&gt;
  &lt;li&gt;Supports thread-safe.&lt;/li&gt;
  &lt;li&gt;Does not support arm64 and only for 32-bits architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;We get one assemble code from ida pro first and this code will call the libc api: &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sub_hello	proc near 
arg_0		= dword	ptr  8 
.data 
        format db \&quot;hello: %x\&quot;, 0ah, 0dh, 0 
 
off_5A74B0	dd offset loc_6B2B50	; DATA XREF: sub_589100+1832r 
		dd offset loc_58A945	; jump table for switch	statement 
 
.code 
        ; hi
        push	ebp ;hello 
		mov	ebp, esp 
 
    loc_6B2B50:				; CODE XREF: sub_6B2B40+8j
        push    eax 
		mov	eax, [ebp+arg_0] 
        push eax 
        mov eax, offset format 
        push eax 
        call printf 
        add esp, 4 
        pop eax 
        
        mov ecx, 1
        jmp ds:off_5A74B0[ecx*4]
 
loc_58A945:
        push    eax 
		mov	eax, [ebp+arg_0] 
        push eax 
        mov eax, offset format 
        push eax 
        call printf 
        add esp, 4 
        pop eax 
        
  end:
        mov	esp, ebp 
		pop	ebp 
        retn 
sub_hello    endp 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we call it in c language first.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sub_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31415926&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output results:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello: 31415926
hello: 31415926
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nextly, we attempt to load this asm code using our x86 virtual machine.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_void_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vm86_demo_proc_exec_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the code
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_char_t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_code_sub_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;sub_hello	proc near &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
arg_0		= dword	ptr  8 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
.data &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        format db &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hello: %x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, 0ah, 0dh, 0 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
off_5A74B0	dd offset loc_6B2B50	; DATA XREF: sub_589100+1832r &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		dd offset loc_58A945	; jump table for switch	statement &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
.code &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        ; hi&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push	ebp ;hello &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		mov	ebp, esp &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
    loc_6B2B50:				; CODE XREF: sub_6B2B40+8j&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push    eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		mov	eax, [ebp+arg_0] &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        mov eax, offset format &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        call printf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        add esp, 4 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        pop eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        mov ecx, 1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        jmp ds:off_5A74B0[ecx*4]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
loc_58A945:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push    eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		mov	eax, [ebp+arg_0] &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        mov eax, offset format &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        call printf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        add esp, 4 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        pop eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
  end:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        mov	esp, ebp &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		pop	ebp &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        retn &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
sub_hello    endp &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
    &quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// the machine
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;vm86_machine_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// the lock
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tb_spinlock_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_machine_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// enter
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tb_spinlock_enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// the stack
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;vm86_stack_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_machine_stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// compile proc
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;vm86_proc_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_text_compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm86_machine_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_code_sub_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_code_sub_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// add function
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;vm86_machine_function_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;printf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_demo_proc_func_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// init arguments
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;vm86_stack_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// done proc
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;vm86_proc_done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// restore stack
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;vm86_stack_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// trace
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;tb_trace_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sub_hello(%x)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// leave
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tb_spinlock_leave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// call this function: sub_hello(0x31415926)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;vm86_demo_proc_exec_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x31415926&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output results:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello: 31415926
hello: 31415926
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/vm86&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/project/&quot;&gt;More projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compilation&quot;&gt;Compilation&lt;/h2&gt;

&lt;p&gt;Please install &lt;a href=&quot;http://www.xmake.io&quot;&gt;xmake&lt;/a&gt; first!&lt;/p&gt;

&lt;h3 id=&quot;compile-project-on-macosx&quot;&gt;Compile project on macosx&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo brew install xmake
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -a i386
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;compile-project-on-linux&quot;&gt;Compile project on linux&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/waruqi/xmake.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xmake
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo ./install
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vm86
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -a i386
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;compile-project-on-windows&quot;&gt;Compile project on windows&lt;/h3&gt;

&lt;p&gt;Downloads https://github.com/waruqi/xmake/archive/master.zip first.&lt;/p&gt;

&lt;p&gt;Extracts it and run install.bat&lt;/p&gt;

&lt;p&gt;Lastly, we start compiling vm86 project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;compile-project-for-android&quot;&gt;Compile project for android&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vm86
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxx/ndk
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;running&quot;&gt;Running&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake r demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ida-scripts&quot;&gt;Ida scripts&lt;/h2&gt;

&lt;p&gt;The script files: &lt;code class=&quot;highlighter-rouge&quot;&gt;export_function.idc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;export_data.idc&lt;/code&gt; in the project directory (idc) 
can help us to export the given assembly function and data from the ida pro.&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2016/07/26/x86-script-instruction-virtual-machine/</link>
        <guid isPermaLink="true">http://www.tboox.org/2016/07/26/x86-script-instruction-virtual-machine/</guid>
        
        <category>xmake</category>
        
        <category>x86</category>
        
        <category>script</category>
        
        <category>assembly</category>
        
        <category>virtual</category>
        
        <category>machine</category>
        
        <category>idapro</category>
        
        
        <category>vm86</category>
        
      </item>
    
      <item>
        <title>x86汇编指令脚本虚拟机</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;这是一个可以直接解释执行从ida pro里面提取出来的x86汇编代码的虚拟机。&lt;/p&gt;

&lt;p&gt;非常精简，整体架构上不能跟那些成熟的虚拟机相比，主要目标是够用、能用、轻量就行，如果觉得代码架构设计的不是很好的话，也不用过于吐槽哈。。&lt;/p&gt;

&lt;p&gt;虽然我还有写过两个比较成熟的虚拟机项目（jvm和avm），虽然架构上比这个更完善，更容易扩展，功能也更强大&lt;/p&gt;

&lt;p&gt;但是毕竟是给公司写的，没法拿出来分享。。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;先说说，为什么要写这个东西。。&lt;/p&gt;

&lt;p&gt;之前有段时间，我在用ida逆向分析某些程序的算法，并且要把它提取出来将其跨平台运行，这个时候我首先考虑到是ida的F5插件&lt;/p&gt;

&lt;p&gt;毕竟这个可以直接反成c/c++代码，还是很强大的，基本上98%的x86汇编代码，我在通过f5还原成c/c++代码后，都能正常运行。&lt;/p&gt;

&lt;p&gt;原本我以为可以万事大吉了，不过就在当我沾沾自喜的时候，发现其中某个汇编函数的c代码，死活就是运行不正常，输出结果不对。&lt;/p&gt;

&lt;p&gt;而且那个函数偏偏代码量出奇的大，光c代码就有上万行，而且里面还对数据结构和明文都做了变换和加密，要是慢慢调试的话，得痛苦死。。哎。。&lt;/p&gt;

&lt;p&gt;没办法，只好另想出路，既然ida还原c有时候不一定完全准确，但是其汇编代码的准确度还是可以保证的，并且从ida中提取的汇编代码
基本上，不用怎么改，就能编译通过，因此，我先验证了下直接编译汇编代码，运行看看结果对不对。。&lt;/p&gt;

&lt;p&gt;结果跟我想的一样，是ok的。。那么问题来了。。&lt;/p&gt;

&lt;p&gt;既然汇编运行结果正常，那怎么把它整成跨平台运行呢，直接从编译后x86的指令集进行模拟？工作量有点大，得不偿失。。&lt;/p&gt;

&lt;p&gt;有没有取巧些办法呢？当然有，那就是直接解析和运行源码级的x86汇编代码，相当于写个轻量级的精简版x86的脚本虚拟机，来把它运行起来。。&lt;/p&gt;

&lt;p&gt;听上去，貌似更麻烦了，其实由于这里只要能够跑通部分需要的汇编指令就行了，因此写个精简版的还是很方便，不需要多少工作量&lt;/p&gt;

&lt;p&gt;我前前后后，也就花了一个礼拜就搞定了，非常精简，当然也不完善（也没必要哈，不能跟那些大部头相比）&lt;/p&gt;

&lt;p&gt;我的目标就是够用就行，因此我写的差不多厚，就尝试去加载之前有问题的汇编代码，如果发现有指令没实现，那就去实现它，直到跑通为主。。&lt;/p&gt;

&lt;p&gt;最后测试结果：&lt;/p&gt;

&lt;p&gt;可以正常跑通那个十几万行的汇编代码，并且在arm下运行的性能还算ok，至少满足我的个人需求了。。: )&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;特性&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;跨平台运行支持，可以在windows、linux、macosx以及android, ios上运行x86的汇编代码。。&lt;/li&gt;
  &lt;li&gt;支持常用x86汇编指令（例如，逻辑操作，跳转，循环，调用，压栈等指令）&lt;/li&gt;
  &lt;li&gt;支持函数间跳转，以及第三方api调用&lt;/li&gt;
  &lt;li&gt;支持参数传入，以及运行结束后，返回值的获取&lt;/li&gt;
  &lt;li&gt;虚拟机的运行粒度为单个函数，函数间的跳转可以通过多个虚拟机实例来完成（轻量的，性能影响不大）&lt;/li&gt;
  &lt;li&gt;支持线程安全&lt;/li&gt;
  &lt;li&gt;暂时不支持arm64，只能在32位下运行（有兴趣的同学可以自行修改）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;例子&lt;/h2&gt;

&lt;p&gt;我们先从ida中提取一段汇编代码，这段汇编主要是&lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;库函数打印外部传入的数值&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sub_hello	proc near 
arg_0		= dword	ptr  8 
.data 
        format db \&quot;hello: %x\&quot;, 0ah, 0dh, 0 
 
off_5A74B0	dd offset loc_6B2B50	; DATA XREF: sub_589100+1832r 
		dd offset loc_58A945	; jump table for switch	statement 
 
.code 
        ; hi
        push	ebp ;hello 
		mov	ebp, esp 
 
    loc_6B2B50:				; CODE XREF: sub_6B2B40+8j
        push    eax 
		mov	eax, [ebp+arg_0] 
        push eax 
        mov eax, offset format 
        push eax 
        call printf 
        add esp, 4 
        pop eax 
        
        mov ecx, 1
        jmp ds:off_5A74B0[ecx*4]
 
loc_58A945:
        push    eax 
		mov	eax, [ebp+arg_0] 
        push eax 
        mov eax, offset format 
        push eax 
        call printf 
        add esp, 4 
        pop eax 
        
  end:
        mov	esp, ebp 
		pop	ebp 
        retn 
sub_hello    endp 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果用c来调用的话，就是&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sub_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31415926&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello: 31415926
hello: 31415926
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来我们把这段汇编直接放到我们的虚拟机里面执行：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_void_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vm86_demo_proc_exec_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 上述汇编代码的字符串表示
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_char_t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_code_sub_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;sub_hello	proc near &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
arg_0		= dword	ptr  8 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
.data &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        format db &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hello: %x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, 0ah, 0dh, 0 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
off_5A74B0	dd offset loc_6B2B50	; DATA XREF: sub_589100+1832r &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		dd offset loc_58A945	; jump table for switch	statement &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
.code &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        ; hi&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push	ebp ;hello &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		mov	ebp, esp &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
    loc_6B2B50:				; CODE XREF: sub_6B2B40+8j&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push    eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		mov	eax, [ebp+arg_0] &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        mov eax, offset format &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        call printf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        add esp, 4 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        pop eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        mov ecx, 1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        jmp ds:off_5A74B0[ecx*4]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
loc_58A945:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push    eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		mov	eax, [ebp+arg_0] &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        mov eax, offset format &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        push eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        call printf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        add esp, 4 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        pop eax &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
  end:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        mov	esp, ebp &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
		pop	ebp &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
        retn &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
sub_hello    endp &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
    &quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 定义一个虚拟机
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;vm86_machine_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 锁定虚拟机，保证线程安全（这个根据需要，可选）
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tb_spinlock_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_machine_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tb_spinlock_enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 获取虚拟机的堆栈
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;vm86_stack_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_machine_stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 编译上面的汇编代码，并生成一个过程对象的引用
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;vm86_proc_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_text_compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm86_machine_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_code_sub_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_code_sub_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 添加汇编里面需要调用到的外部库函数
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;vm86_machine_function_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;printf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm86_demo_proc_func_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 初始化调用参数
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;vm86_stack_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 执行这个汇编代码
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;vm86_proc_done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 恢复堆栈，获取返回值（这里是void的，传null就行了）
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;vm86_stack_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 解锁虚拟机
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tb_spinlock_leave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 执行这个汇编函数：sub_hello(0x31415926)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;vm86_demo_proc_exec_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x31415926&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果ok，那么输出结果当然也是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello: 31415926
hello: 31415926
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;源码&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waruqi/vm86&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/cn/project/&quot;&gt;更多项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;编译&lt;/h2&gt;

&lt;p&gt;需要先安装&lt;a href=&quot;http://www.xmake.io/cn&quot;&gt;xmake&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;macosx-&quot;&gt;在 macosx 上编译&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo brew install xmake
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -a i386
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;linux-&quot;&gt;在 linux 上编译&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/waruqi/xmake.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xmake
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo ./install
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vm86
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -a i386
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;windows-&quot;&gt;在 windows 上编译&lt;/h3&gt;

&lt;p&gt;下载 https://github.com/waruqi/xmake/archive/master.zip&lt;/p&gt;

&lt;p&gt;解压运行里面的 install.bat 安装xmake后进行编译：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;android&quot;&gt;编译android版本&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vm86
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxx/ndk
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-6&quot;&gt;运行&lt;/h2&gt;

&lt;p&gt;运行测试程序：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake r demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;后话&lt;/h2&gt;

&lt;p&gt;最后，在项目的idc目录下，有两个脚本工具：&lt;code class=&quot;highlighter-rouge&quot;&gt;export_function.idc&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;export_data.idc&lt;/code&gt; 可以用来辅助我们从ida中导出指定的汇编函数和数据&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/07/26/x86-script-instruction-virtual-machine/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/07/26/x86-script-instruction-virtual-machine/</guid>
        
        <category>xmake</category>
        
        <category>x86</category>
        
        <category>汇编</category>
        
        <category>虚拟机</category>
        
        <category>windows</category>
        
        <category>跨平台</category>
        
        <category>idapro</category>
        
        <category>逆向分析</category>
        
        
        <category>vm86</category>
        
      </item>
    
      <item>
        <title>Running and debugging program using xmake</title>
        <description>&lt;p&gt;xmake can run and debug the given target program now.&lt;/p&gt;

&lt;p&gt;We only need configure the debug mode to compile this target and run it.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;-- enable debug symbols&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- define target&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we compile and run this program with the debug symbols.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -m debug
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake r -d demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will generate pdb debug symbol files and detect the default debugger automatically on windows. (.e.g vsjitdebugger, windbg, ollydbg …)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/vsjitdebugger.png&quot; alt=&quot;vsjitdebugger&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/ollydbg.png&quot; alt=&quot;ollydbg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we can set the given third-party debugger manually.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --dd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogram Files&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ebugging Tools for Windows (x86)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\w&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;indbg.exe&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake r -d demo 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or we set it to the global configuration.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake g --dd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogram Files&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ebugging Tools for Windows (x86)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\w&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;indbg.exe&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake will load the debugger (lldb or gdb ..) to debug program in default case on macosx and linux.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake r -d demo

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;lldb]&lt;span class=&quot;nv&quot;&gt;$target&lt;/span&gt; create &lt;span class=&quot;s2&quot;&gt;&quot;build/demo&quot;&lt;/span&gt;
  Current executable &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;to &lt;span class=&quot;s1&quot;&gt;&#39;build/demo&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x86_64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;lldb]&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2016/07/25/support-debugger-on-windows/</link>
        <guid isPermaLink="true">http://www.tboox.org/2016/07/25/support-debugger-on-windows/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>symbolfile</category>
        
        <category>run</category>
        
        <category>debug</category>
        
        <category>windbg</category>
        
        <category>ollydbg</category>
        
        <category>windows</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>ios方法调用自动追踪工具：itrace</title>
        <description>&lt;p&gt;这个工具是我之前在做ios逆向分析的时候，随手写的一个小工具，虽然现在已经不怎么维护了，不过这里还是拿出来简单介绍下吧。。&lt;/p&gt;

&lt;p&gt;当初写这个工具的背景主要是因为要在越狱的ios系统上，做些插件开发，所以要分析一些私有api的调用规则，以及传参情况。&lt;/p&gt;

&lt;p&gt;虽然可以通过ida进行静态分析，也可以做到，但是有些需求毕竟还是需要动态分析来的方便，而且那个时候ida的arm f5插件还没流出，
只能通过人工逆向arm来分析，工作量还是挺大的。&lt;/p&gt;

&lt;p&gt;因此就萌生了能否动态去追踪ios系统上对oc代码的调用逻辑呢，逼近objc是基于runtime的，总归是有些办法的。。&lt;/p&gt;

&lt;p&gt;一开始，我的重点是在&lt;code class=&quot;highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt;这个接口，毕竟所有oc调用，最后都会路由到这个接口中，因此我写了个gdb的脚本去动态trace这个接口：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;define to 
b objc_msgSend
c
set $__i = 0
while ($__i &amp;lt; $arg0)
printf &quot;%d: [%s %s]\n&quot;, $__i, (char*)object_getClassName($r0), (char*)$r1
set $__i++
c
end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在.gdbinit这个文件中加入这个脚本api的定义，然后加载gdb attach到指定的系统进程后，执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;to 100
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以trace之后的100条&lt;code class=&quot;highlighter-rouge&quot;&gt;objc_msgSend&lt;/code&gt;调用，并且打印出详细的objc方法调用名称。&lt;/p&gt;

&lt;p&gt;但是，用了一段时间后，发现这种trace的方式效果和体验都不是很好，相当的慢，慢的几乎能把ui卡着动不了，毕竟是全局hook嘛。。。&lt;/p&gt;

&lt;p&gt;没办法，只好重新想其他办法，于是乎，我开始研究objc的&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html&quot;&gt;runtime&lt;/a&gt;接口&lt;/p&gt;

&lt;p&gt;发现还是可以通过直接改写method的imp地址，直接实现方法替换的，这个其实现在已经很常用了哈，基本上是一篇ios hook的文章都会有介绍，这里就不多说了&lt;/p&gt;

&lt;p&gt;主要我不仅要通过这个来实现一个类的所有method的批量自动化trace，而且要能自动trace打印出这些method调用的所有参数数据，这才是难点。。&lt;/p&gt;

&lt;p&gt;毕竟如果只能trace调用的方法名，其实用处不大，我的需求还是要窥探每个调用的参数传入情况，这样就能一目了然的实时查看某个app和系统进程的执行状态，以及到底干了什么事情。。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我要trace系统的itunestore进程，只需要先通过ida反汇编这个程序，或者通过class-dump看看这个程序用到了哪些classes。。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后配置需要trace的一些看上去比较有用的classes名：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    修改itrace.xml配置文件，增加需要hook的类名：
    &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
    &amp;lt;itrace&amp;gt;
      &amp;lt;class&amp;gt;
        &amp;lt;SSDevice/&amp;gt;
        &amp;lt;SSDownload/&amp;gt;
        &amp;lt;SSDownloadManager/&amp;gt;
        &amp;lt;SSDownloadQueue/&amp;gt;
        &amp;lt;CPDistributedMessagingCenter/&amp;gt;
        &amp;lt;CPDistributedNotificationCenter/&amp;gt;
        &amp;lt;NSString args=&quot;0&quot;/&amp;gt;
      &amp;lt;/class&amp;gt;
    &amp;lt;/itrace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注： 尽量不要去hook， 频繁调用的class， 比如 UIView NSString， 否则会很卡，操作就不方便了。
注： 如果挂接某个class， 中途打印参数信息挂了， 可以在对应的类名后面 加上 args=”0” 属性， 来禁止打印参数信息， 这样会稳定点。 
     如果要让所有类都不打印参数信息， 可以直接设置： &lt;class args=&quot;0&quot;&gt;&lt;/class&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;将整个itracer目录下的所有文件用手机助手工具，上传到ios系统上的 /tmp 下面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    /tmp/itracer
    /tmp/itrace.dylib
    /tmp/itrace.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;进行trace&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;进入itracer所在目录：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改执行权限：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod 777 ./itracer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行程序:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./itracer springboard &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;spingboard 为需要挂接的进程名， 支持简单的模糊匹配&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;查看 trace log， 注： log 的实际输出在： Xcode-Windows菜单-Organizer-Console 中：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownloadQueue downloads]
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownloadManager downloads]
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownloadManager _copyDownloads]
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownloadQueue _sendDownloadStatusChangedAtIndex:]: 0
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownloadQueue _messageObserversWithFunction:context:]: 0x334c5d51: 0x2fe89de0
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownloadQueue downloads]
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownloadManager downloads]
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownloadManager _copyDownloads]
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownload cachedApplicationIdentifier]
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownload status]
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [SSDownload cachedApplicationIdentifier]
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [CPDistributedNotificationCenter postNotificationName:userInfo:]: SBApplicationNotificationStateChanged: {
          SBApplicationStateDisplayIDKey = &quot;com.apple.AppStore&quot;;
          SBApplicationStateKey = 2;
          SBApplicationStateProcessIDKey = 5868;
          SBMostElevatedStateForProcessID = 2;
      }
    Jan 21 11:12:58 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [3edc9d98]: [CPDistributedNotificationCenter postNotificationName:userInfo:toBundleIdentifier:]: SBApplicationNotificationStateChanged: {
          SBApplicationStateDisplayIDKey = &quot;com.apple.AppStore&quot;;
          SBApplicationStateKey = 2;
          SBApplicationStateProcessIDKey = 5868;
          SBMostElevatedStateForProcessID = 2;
      }: null
    Jan 21 11:12:59 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [105d7000]: [SSDownloadManager _handleMessage:fromServerConnection:]: 0xe6920b0: 0xe007040
    Jan 21 11:12:59 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [105d7000]: [SSDownloadManager _handleDownloadStatesChanged:]: 0xe6920b0
    Jan 21 11:12:59 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [105d7000]: [SSDownloadManager _copyDownloads]
    Jan 21 11:12:59 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [105d7000]: [SSDownload persistentIdentifier]
    Jan 21 11:12:59 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [105d7000]: [SSDownload _addCachedPropertyValues:]: {
          I = SSDownloadPhaseDownloading;
      }
    Jan 21 11:12:59 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [105d7000]: [SSDownload _applyPhase:toStatus:]: SSDownloadPhaseDownloading: &amp;lt;SSDownloadStatus: 0xe6b8e80&amp;gt;
    Jan 21 11:12:59 unknown SpringBoard[5706] &amp;lt;Warning&amp;gt;: [itrace]: [105d7000]: [SSDownloadQueue downloadManager:downloadStatesDidChange:]: &amp;lt;SSDownloadManager: 0x41ea60&amp;gt;: (
          &quot;&amp;lt;SSDownload: 0xe6bd970&amp;gt;: -4085275246093726486&quot;
      )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过上面的log，可以看到很多调用的参数传递数据信息，当然目前还是有很多缺陷和限制在里面&lt;/p&gt;

&lt;p&gt;比如：不能获取返回值，不能trace太多的classes（超过几百个，否则可能不稳定）&lt;/p&gt;

&lt;p&gt;这个如果大家有兴趣，可以自己修改代码，帮我优化下哈，嘿嘿。。&lt;/p&gt;

&lt;p&gt;最后，我就简单介绍下itrace的一些特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;批量跟踪ios下指定class对象的所有调用流程&lt;/li&gt;
  &lt;li&gt;支持ios for armv6,armv7,arm64 以及mac for x86, x64&lt;/li&gt;
  &lt;li&gt;自动探测参数类型，并且打印所有参数的详细信息&lt;/li&gt;
  &lt;li&gt;增加对arm64的支持，刚调通稳定性有待测试。
 arm64进程注入没时间做了，暂时用了substrate的hookprocess， 所以大家需要先装下libsubstrate.dylib
 armv7的版本是完全不依赖substrate的。&lt;/li&gt;
  &lt;li&gt;arm64的版本对参数的信息打印稍微做了些增强。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至于其自动化trace参数的原理，简单说下，就是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;method_getTypeEncoding&lt;/code&gt;这个runtime接口，获取每个调用method的方法中
参数原型，然后对其进行解析，获取到实际的参数个数，以及每个参数的类型信息，进行针对性打印输出。。&lt;/p&gt;

&lt;p&gt;具体是如何处理的，这里就不多说了，有兴趣的同学可以看看&lt;a href=&quot;https://github.com/waruqi/itrace&quot;&gt;源码&lt;/a&gt;。。&lt;/p&gt;

&lt;p&gt;如果大家想要编译这个项目，还是简单的，它也是基于&lt;a href=&quot;http://www.xmake.io/cn&quot;&gt;xmake&lt;/a&gt;的，并且xmake也已经被homebrew收录了，只需要执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo brew install xmake
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就能编译通过。: )&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/07/25/itrace-descrption/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/07/25/itrace-descrption/</guid>
        
        <category>xmake</category>
        
        <category>trace</category>
        
        <category>ios</category>
        
        <category>objc</category>
        
        <category>hook</category>
        
        <category>方法调用</category>
        
        <category>插件</category>
        
        
        <category>itrace</category>
        
      </item>
    
      <item>
        <title>在windows下支持调试运行</title>
        <description>&lt;p&gt;现在xmake在windows下，也已经支持调试运行了，可以在编译完debug版本的程序后，直接进行调试开发。。&lt;/p&gt;

&lt;p&gt;我们继续以tbox工程为例：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -m debug
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake r -d demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述命令，先配置了debug模式编译，为了启用pdb调试符号文件的生成，然后自动编译后，调试运行demo程序。。&lt;/p&gt;

&lt;p&gt;xmake会在配置的时候，自动检测windows上注册表里面的默认调试器，然后加载我们的目标程序并运行。&lt;/p&gt;

&lt;p&gt;一般情况下，加载的是vs自带的vsjitdebugger调试器，当然xmake也支持windbg和ollydbg（做逆向的，这个用的比较多哈。。）&lt;/p&gt;

&lt;p&gt;我们试着运行demo中的exception测试用例，进行人为中断，然后调试运行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake r -d demo platform_exception
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到如下效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/vsjitdebugger.png&quot; alt=&quot;vsjitdebugger&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接着我们再来看下ollydbg的加载效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/ollydbg.png&quot; alt=&quot;ollydbg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了通过检测的内置调试器来进行调试，我们也可以针对特定项目，手动配置指定第三方调试进行加载运行&lt;/p&gt;

&lt;p&gt;例如指定windbg的调试器路径进行调试：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --dd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogram Files&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ebugging Tools for Windows (x86)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\w&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;indbg.exe&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake r -d demo platform_exception
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者可以配置到全局配置中，这样不用每次都去重新配置了：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake g --dd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogram Files&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ebugging Tools for Windows (x86)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\w&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;indbg.exe&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 24 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/07/24/support-debugger-on-windows/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/07/24/support-debugger-on-windows/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>编译</category>
        
        <category>符号文件</category>
        
        <category>调试器</category>
        
        <category>windows</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake默认启用pdb符号文件</title>
        <description>&lt;p&gt;之前xmake默认编译windows目标，debug模式下采用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;-Z7&lt;/code&gt;编译选项，内置的调试符号信息到obj文件里面&lt;/p&gt;

&lt;p&gt;但是这种方式按msdn的文档上说，是属于旧式的调试符号文件格式，所以为了考虑后续的兼容性，xmake修改了默认的调试符号生成规则，&lt;/p&gt;

&lt;p&gt;改为默认启用pdb符号文件，并且pdb的方式更为常用。。&lt;/p&gt;

&lt;p&gt;这个行为的修改，并不会影响到&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;的设置，如果在这个文件中，设置了启用调试符号：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那么，编译debug版本的目标时，就会自动生成pdb文件，以tbox为例：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -m debug
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编译完成后，会自动在build目录下生成两个pdb文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;build\tbox.pdb
build\demo.pdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一个是静态库的pdb文件，一个是demo程序的pdb文件，并且如果我们执行打包命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake package
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;的话，也会在包目录里面，将pdb文件也给自动打包进去。。。&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/07/24/enable-pdb-on-windows/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/07/24/enable-pdb-on-windows/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>编译</category>
        
        <category>符号文件</category>
        
        <category>调试符号</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake工程描述编写之选择性编译</title>
        <description>&lt;p&gt;xmake 提供了一些内置的条件判断api，用于在选择性编译时，获取到一些工程状态的相关信息，来调整编译逻辑。。&lt;/p&gt;

&lt;p&gt;例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;is_os&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is_plat&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is_arch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is_kind&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is_mode&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;is_option&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;ismode&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is_mode&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;我们先拿最常用的&lt;code class=&quot;highlighter-rouge&quot;&gt;is_mode&lt;/code&gt;来讲讲如何使用，这个api主要用来判断当前的编译模式，例如平常编译配置的时候，会执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -m debug
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;来编译&lt;code class=&quot;highlighter-rouge&quot;&gt;debug&lt;/code&gt;版本，那么模式就是&lt;code class=&quot;highlighter-rouge&quot;&gt;debug&lt;/code&gt;，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;release&lt;/code&gt;版本，也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;release&lt;/code&gt;了&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -m release
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是如果仅仅只是这么配置，xmake还是不知道如果为debug进行编译，如何编译release版本，因为这些模式的值不是内置的&lt;/p&gt;

&lt;p&gt;我们可以随便设置，例如：profile, checking等等，用来编译性能模式，检测模式，这些就看咱们项目实际的需求了。。&lt;/p&gt;

&lt;p&gt;一般情况下只需要&lt;code class=&quot;highlighter-rouge&quot;&gt;debug&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;release&lt;/code&gt;就行了，那如何区分呢，这就需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;进行配置了，一般可参考如下配置：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 如果当前编译模式是debug&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 添加DEBUG编译宏&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 启用调试符号&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 禁用优化&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_optimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 如果是release模式&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 隐藏符号&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- strip所有符号&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 开启优化为：最快速度模式&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_optimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fastest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 忽略帧指针&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_cxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-fomit-frame-pointer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_mxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-fomit-frame-pointer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过判断是否在编译debug版本，来启用和禁用调试符号信息，并且判断是否禁用和启用优化。&lt;/p&gt;

&lt;p&gt;当然，如果我们的项目还设置了其他模式，例如性能分析模式：profile，那么还可以通过这个来判断是否需要添加一些分析分析上的编译选项。&lt;/p&gt;

&lt;h3 id=&quot;isplat&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is_plat&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;接下来我们讲讲这个编译平台的判断，这个也非常实用哦，虽然我们的工具是为了跨平台开发，通常的配置肯定都是通用的&lt;/p&gt;

&lt;p&gt;但是毕竟项目成千上万，需求各不相同，总归会有些项目需要针对不同的平台做些编译上的特殊处理&lt;/p&gt;

&lt;p&gt;这个时候，我们就需要这个api了，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 如果当前平台是android&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/xxx/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--如果当前平台是macosx或者iphoneos&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;macosx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;iphoneos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_mxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-framework Foundation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_ldflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-framework Foundation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里针对android平台，增加了一些特殊代码的编译，针对macosx和iphoneos平台，增加了Foundation框架的链接。&lt;/p&gt;

&lt;p&gt;这里还有个比较实用的小技巧，&lt;code class=&quot;highlighter-rouge&quot;&gt;is_xxx&lt;/code&gt;系列接口，都是可以同时传递多个参数的，逻辑上是or的关系&lt;/p&gt;

&lt;p&gt;我们可以像上面那么写法：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;macosx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;iphoneos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;否则如果用lua的原生语法的话，虽然也可以，但是会很臃肿，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;macosx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iphoneos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;除了&lt;code class=&quot;highlighter-rouge&quot;&gt;is_xxx&lt;/code&gt;系列，像：&lt;code class=&quot;highlighter-rouge&quot;&gt;add_xxxs&lt;/code&gt; 这种后缀有&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;的复数api，都是可以传递多个参数的哦，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;等等，这里就不一一介绍了。。。&lt;/p&gt;

&lt;h3 id=&quot;isarch&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is_arch&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;这个跟&lt;code class=&quot;highlighter-rouge&quot;&gt;is_plat&lt;/code&gt;类似，不过是用来判断当前编译的目标架构的，也就是：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f --arch&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，我们在工程描述中，进行判断：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 如果当前架构是x86_64或者i386&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x86_64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i386&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/xxx/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--如果当前平台是armv7, arm64, armv7s, armv7-a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;armv7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;arm64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;armv7s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;armv7-a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果像上面那样一个个去判断所有arm架构，也许会很繁琐，毕竟每个平台的架构类型很多，xmake提供了类似&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;中的通配符匹配模式，来更加简洁的进行判断：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;--如果当前平台是arm平台&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arm*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;用*就可以匹配所有了。。&lt;/p&gt;

&lt;h3 id=&quot;isos&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is_os&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;这个很简单，用来判断当前编译目标，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 如果当前操作系统是ios&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ios&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/xxx/*.m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;目前支持的操作系统有：windows、linux、android、macosx、ios&lt;/p&gt;

&lt;h3 id=&quot;iskind&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is_kind&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;用来判断当前是否编译的是动态库还是静态库&lt;/p&gt;

&lt;p&gt;一般用于如下场景：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- 通过配置设置目标的kind&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(kind)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;-- 如果当前编译的是静态库，那么添加指定文件&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/xxx.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编译配置的时候，可手动切换，编译类型：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;-- 编译静态库&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xmake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xmake&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 编译动态库&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xmake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xmake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;isoption&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is_option&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;如果某个自动检测选项、手动设置选项被启用，那么可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;is_option&lt;/code&gt;接口来判断，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;-- 如果手动启用了xmake f --demo=y 选项&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
   
    &lt;span class=&quot;c1&quot;&gt;-- 编译demo目录下的代码&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_subdirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 23 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/07/23/condition-and-select-compile/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/07/23/condition-and-select-compile/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>编译</category>
        
        <category>工程描述</category>
        
        <category>xmake.lua</category>
        
        <category>条件判断</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>How to complie project using the cross-toolchains</title>
        <description>&lt;p&gt;xmake provides a convenient and flexible cross-compiling support, in most cases, we need not to configure complex toolchains prefix, for example: &lt;code class=&quot;highlighter-rouge&quot;&gt;arm-linux-&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As long as this toolchains meet the following directory structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/toolchains_sdkdir
   - bin
       - arm-linux-gcc
       - arm-linux-ld
       - ...
   - lib
       - libxxx.a
   - include
       - xxx.h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then，we can only configure the sdk directory and build it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p linux --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/toolchains_sdkdir
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake will detect the prefix: &lt;code class=&quot;highlighter-rouge&quot;&gt;arm-linux-&lt;/code&gt; and add the include and library search directory automatically.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-I/home/toolchains_sdkdir/include -L/home/toolchains_sdkdir/lib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, we need set it manually if the toolchains &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; directory is in other places.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p linux --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/toolchains_sdkdir --toolchains&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/opt/bin
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or we need configure all options for compiling successfully if this toolchains has completely differen directory structure.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p linux --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/toolchains_sdkdir --toolchains&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/opt/bin --cxflags&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-I/usr/xxx/include&quot;&lt;/span&gt; --ldflags&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-L/usr/zzz/lib&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also set the prefix using the argument &lt;code class=&quot;highlighter-rouge&quot;&gt;--cross=&lt;/code&gt; manually.&lt;/p&gt;

&lt;p&gt;.e.g&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p linux --cross&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm-linux- --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/toolchains_sdkdir ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2016/07/22/how-to-compile-on-cross-toolchains/</link>
        <guid isPermaLink="true">http://www.tboox.org/2016/07/22/how-to-compile-on-cross-toolchains/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>cross-toolchains</category>
        
        <category>cross-compiling</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>如何通过xmake进行交叉编译</title>
        <description>&lt;p&gt;xmake 提供了方便灵活的交叉编译支持，大部分情况下，都不需要配置很复杂的toolchains前缀，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;arm-linux-&lt;/code&gt; 什么的&lt;/p&gt;

&lt;p&gt;只要这个toolchains目录满足如下结构（大部分的交叉工具链都是这个结构）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/toolchains_sdkdir
   - bin
       - arm-linux-gcc
       - arm-linux-ld
       - ...
   - lib
       - libxxx.a
   - include
       - xxx.h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那么，使用xmake进行交叉编译的时候，只需要进行如下配置和编译：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p linux --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/toolchains_sdkdir
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake会去自动探测，gcc等编译器的前缀名：&lt;code class=&quot;highlighter-rouge&quot;&gt;arm-linux-&lt;/code&gt;，并且编译的时候，也会自动加上 链接库 和 头文件 的搜索选项：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-I/home/toolchains_sdkdir/include -L/home/toolchains_sdkdir/lib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这些都是xmake自动处理的，不需要手动配置他们。。&lt;/p&gt;

&lt;p&gt;但是，也有些例外的情况，比如一些特殊的交叉工具链的，编译器bin目录，并不在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/toolchains_sdkdir/bin&lt;/code&gt; 这个位置，而是独立到了 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/opt/bin&lt;/code&gt; ， 那怎么办呢，其实也不麻烦，配置的时候，再指定下bin目录的位置就好：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p linux --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/toolchains_sdkdir --toolchains&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/opt/bin
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果这个工具链非常奇葩，就是不按规则出牌，路径规则很乱的话，那么xmake也没办法那么智能，只能手动配置全所有参数了：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p linux --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/toolchains_sdkdir --toolchains&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/opt/bin --cxflags&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-I/usr/xxx/include&quot;&lt;/span&gt; --ldflags&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-L/usr/zzz/lib&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外，如果交叉工具链的前缀，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;arm-linux-&lt;/code&gt;  xmake 没有检测成功，你也可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;--cross=&lt;/code&gt;参数手动配置上它：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p linux --cross&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm-linux- --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/toolchains_sdkdir ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/07/22/how-to-compile-on-cross-toolchains/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/07/22/how-to-compile-on-cross-toolchains/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>交叉编译</category>
        
        
        <category>xmake</category>
        
      </item>
    
  </channel>
</rss>
